ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
  27              		.file 2 "Src/motor.c"
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** #include "stm32f0xx.h"
   7:Src/motor.c   **** #include "stm32f072xb.h"
   8:Src/motor.c   **** 
   9:Src/motor.c   **** volatile int16_t error_integral = 0;    // Integrated error signal
  10:Src/motor.c   **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
  11:Src/motor.c   **** volatile int16_t target_rpm = 0;    	// Desired speed target
  12:Src/motor.c   **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  13:Src/motor.c   **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  14:Src/motor.c   **** volatile int16_t error = 0;         	// Speed error signal
  15:Src/motor.c   **** volatile uint8_t Kp = 1;            	// Proportional gain
  16:Src/motor.c   **** volatile uint8_t Ki = 1;            	// Integral gain
  17:Src/motor.c   **** 
  18:Src/motor.c   **** // Sets up the entire motor drive system
  19:Src/motor.c   **** void motor_init(void) {
  20:Src/motor.c   ****     pwm_init();
  21:Src/motor.c   ****     encoder_init();
  22:Src/motor.c   ****     ADC_init();
  23:Src/motor.c   **** }
  24:Src/motor.c   **** 
  25:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  26:Src/motor.c   **** void pwm_init(void) {
  28              		.loc 2 26 21 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 2


  27:Src/motor.c   ****     
  28:Src/motor.c   ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  29:Src/motor.c   ****     GPIOA->MODER |= (1 << 9);
  33              		.loc 2 29 5 view .LVU1
  34              		.loc 2 29 10 is_stmt 0 view .LVU2
  35 0000 9023     		movs	r3, #144
  36 0002 DB05     		lsls	r3, r3, #23
  37 0004 1968     		ldr	r1, [r3]
  38              		.loc 2 29 18 view .LVU3
  39 0006 8022     		movs	r2, #128
  40 0008 9200     		lsls	r2, r2, #2
  41 000a 0A43     		orrs	r2, r1
  42 000c 1A60     		str	r2, [r3]
  30:Src/motor.c   ****     GPIOA->MODER &= ~(1 << 8);
  43              		.loc 2 30 5 is_stmt 1 view .LVU4
  44              		.loc 2 30 10 is_stmt 0 view .LVU5
  45 000e 1A68     		ldr	r2, [r3]
  46              		.loc 2 30 18 view .LVU6
  47 0010 1C49     		ldr	r1, .L2
  48 0012 0A40     		ands	r2, r1
  49 0014 1A60     		str	r2, [r3]
  31:Src/motor.c   **** 
  32:Src/motor.c   ****     // Set PA4 to AF4,
  33:Src/motor.c   ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  50              		.loc 2 33 5 is_stmt 1 view .LVU7
  51              		.loc 2 33 15 is_stmt 0 view .LVU8
  52 0016 1A6A     		ldr	r2, [r3, #32]
  53              		.loc 2 33 19 view .LVU9
  54 0018 1B49     		ldr	r1, .L2+4
  55 001a 0A40     		ands	r2, r1
  56 001c 1A62     		str	r2, [r3, #32]
  34:Src/motor.c   ****     GPIOA->AFR[0] |= (1 << 18);
  57              		.loc 2 34 5 is_stmt 1 view .LVU10
  58              		.loc 2 34 15 is_stmt 0 view .LVU11
  59 001e 196A     		ldr	r1, [r3, #32]
  60              		.loc 2 34 19 view .LVU12
  61 0020 8022     		movs	r2, #128
  62 0022 D202     		lsls	r2, r2, #11
  63 0024 0A43     		orrs	r2, r1
  64 0026 1A62     		str	r2, [r3, #32]
  35:Src/motor.c   **** 
  36:Src/motor.c   ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  37:Src/motor.c   ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
  65              		.loc 2 37 5 is_stmt 1 view .LVU13
  66              		.loc 2 37 10 is_stmt 0 view .LVU14
  67 0028 1A68     		ldr	r2, [r3]
  68              		.loc 2 37 18 view .LVU15
  69 002a 1849     		ldr	r1, .L2+8
  70 002c 0A40     		ands	r2, r1
  71 002e 1A60     		str	r2, [r3]
  38:Src/motor.c   ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
  72              		.loc 2 38 5 is_stmt 1 view .LVU16
  73              		.loc 2 38 10 is_stmt 0 view .LVU17
  74 0030 1968     		ldr	r1, [r3]
  75              		.loc 2 38 18 view .LVU18
  76 0032 A022     		movs	r2, #160
  77 0034 5201     		lsls	r2, r2, #5
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 3


  78 0036 0A43     		orrs	r2, r1
  79 0038 1A60     		str	r2, [r3]
  39:Src/motor.c   ****     
  40:Src/motor.c   ****     //Initialize one direction pin to high, the other low
  41:Src/motor.c   ****     GPIOA->ODR |= (1 << 5);
  80              		.loc 2 41 5 is_stmt 1 view .LVU19
  81              		.loc 2 41 10 is_stmt 0 view .LVU20
  82 003a 5A69     		ldr	r2, [r3, #20]
  83              		.loc 2 41 16 view .LVU21
  84 003c 2021     		movs	r1, #32
  85 003e 0A43     		orrs	r2, r1
  86 0040 5A61     		str	r2, [r3, #20]
  42:Src/motor.c   ****     GPIOA->ODR &= ~(1 << 6);
  87              		.loc 2 42 5 is_stmt 1 view .LVU22
  88              		.loc 2 42 10 is_stmt 0 view .LVU23
  89 0042 5A69     		ldr	r2, [r3, #20]
  90              		.loc 2 42 16 view .LVU24
  91 0044 2031     		adds	r1, r1, #32
  92 0046 8A43     		bics	r2, r1
  93 0048 5A61     		str	r2, [r3, #20]
  43:Src/motor.c   **** 
  44:Src/motor.c   ****     // Set up PWM timer
  45:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  94              		.loc 2 45 5 is_stmt 1 view .LVU25
  95              		.loc 2 45 8 is_stmt 0 view .LVU26
  96 004a 114A     		ldr	r2, .L2+12
  97 004c D169     		ldr	r1, [r2, #28]
  98              		.loc 2 45 18 view .LVU27
  99 004e 8023     		movs	r3, #128
 100 0050 5B00     		lsls	r3, r3, #1
 101 0052 0B43     		orrs	r3, r1
 102 0054 D361     		str	r3, [r2, #28]
  46:Src/motor.c   ****     TIM14->CR1 = 0;                         // Clear control registers
 103              		.loc 2 46 5 is_stmt 1 view .LVU28
 104              		.loc 2 46 16 is_stmt 0 view .LVU29
 105 0056 0F4B     		ldr	r3, .L2+16
 106 0058 0022     		movs	r2, #0
 107 005a 1A60     		str	r2, [r3]
  47:Src/motor.c   ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 108              		.loc 2 47 5 is_stmt 1 view .LVU30
 109              		.loc 2 47 18 is_stmt 0 view .LVU31
 110 005c 9A61     		str	r2, [r3, #24]
  48:Src/motor.c   ****     TIM14->CCER = 0;
 111              		.loc 2 48 5 is_stmt 1 view .LVU32
 112              		.loc 2 48 17 is_stmt 0 view .LVU33
 113 005e 1A62     		str	r2, [r3, #32]
  49:Src/motor.c   **** 
  50:Src/motor.c   ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  51:Src/motor.c   ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 114              		.loc 2 51 5 is_stmt 1 view .LVU34
 115              		.loc 2 51 10 is_stmt 0 view .LVU35
 116 0060 9969     		ldr	r1, [r3, #24]
 117              		.loc 2 51 18 view .LVU36
 118 0062 6820     		movs	r0, #104
 119 0064 0143     		orrs	r1, r0
 120 0066 9961     		str	r1, [r3, #24]
  52:Src/motor.c   ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 4


 121              		.loc 2 52 5 is_stmt 1 view .LVU37
 122              		.loc 2 52 10 is_stmt 0 view .LVU38
 123 0068 186A     		ldr	r0, [r3, #32]
 124              		.loc 2 52 17 view .LVU39
 125 006a 0121     		movs	r1, #1
 126 006c 0843     		orrs	r0, r1
 127 006e 1862     		str	r0, [r3, #32]
  53:Src/motor.c   ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 128              		.loc 2 53 5 is_stmt 1 view .LVU40
 129              		.loc 2 53 16 is_stmt 0 view .LVU41
 130 0070 9962     		str	r1, [r3, #40]
  54:Src/motor.c   ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 131              		.loc 2 54 5 is_stmt 1 view .LVU42
 132              		.loc 2 54 16 is_stmt 0 view .LVU43
 133 0072 9620     		movs	r0, #150
 134 0074 C000     		lsls	r0, r0, #3
 135 0076 D862     		str	r0, [r3, #44]
  55:Src/motor.c   ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 136              		.loc 2 55 5 is_stmt 1 view .LVU44
 137              		.loc 2 55 17 is_stmt 0 view .LVU45
 138 0078 5A63     		str	r2, [r3, #52]
  56:Src/motor.c   ****     
  57:Src/motor.c   ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 139              		.loc 2 57 5 is_stmt 1 view .LVU46
 140              		.loc 2 57 10 is_stmt 0 view .LVU47
 141 007a 1A68     		ldr	r2, [r3]
 142              		.loc 2 57 16 view .LVU48
 143 007c 0A43     		orrs	r2, r1
 144 007e 1A60     		str	r2, [r3]
  58:Src/motor.c   **** }
 145              		.loc 2 58 1 view .LVU49
 146              		@ sp needed
 147 0080 7047     		bx	lr
 148              	.L3:
 149 0082 C046     		.align	2
 150              	.L2:
 151 0084 FFFEFFFF 		.word	-257
 152 0088 FFFFF0FF 		.word	-983041
 153 008c FFC3FFFF 		.word	-15361
 154 0090 00100240 		.word	1073876992
 155 0094 00200040 		.word	1073750016
 156              		.cfi_endproc
 157              	.LFE44:
 159              		.global	__aeabi_uidiv
 160              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 161              		.align	1
 162              		.global	pwm_setDutyCycle
 163              		.syntax unified
 164              		.code	16
 165              		.thumb_func
 167              	pwm_setDutyCycle:
 168              	.LVL0:
 169              	.LFB45:
  59:Src/motor.c   **** 
  60:Src/motor.c   **** // Set the duty cycle of the PWM, accepts (0-100)
  61:Src/motor.c   **** void pwm_setDutyCycle(uint8_t duty) {
 170              		.loc 2 61 37 is_stmt 1 view -0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 5


 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		.loc 2 61 37 is_stmt 0 view .LVU51
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI0:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
  62:Src/motor.c   ****     if(duty <= 100) {
 180              		.loc 2 62 5 is_stmt 1 view .LVU52
 181              		.loc 2 62 7 is_stmt 0 view .LVU53
 182 0002 6428     		cmp	r0, #100
 183 0004 06D8     		bhi	.L4
  63:Src/motor.c   ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 184              		.loc 2 63 9 is_stmt 1 view .LVU54
 185              		.loc 2 63 44 is_stmt 0 view .LVU55
 186 0006 044C     		ldr	r4, .L6
 187 0008 E36A     		ldr	r3, [r4, #44]
 188              		.loc 2 63 38 view .LVU56
 189 000a 5843     		muls	r0, r3
 190              	.LVL1:
 191              		.loc 2 63 50 view .LVU57
 192 000c 6421     		movs	r1, #100
 193 000e FFF7FEFF 		bl	__aeabi_uidiv
 194              	.LVL2:
 195              		.loc 2 63 21 view .LVU58
 196 0012 6063     		str	r0, [r4, #52]
 197              	.L4:
  64:Src/motor.c   ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  65:Src/motor.c   ****     }
  66:Src/motor.c   **** }
 198              		.loc 2 66 1 view .LVU59
 199              		@ sp needed
 200 0014 10BD     		pop	{r4, pc}
 201              	.L7:
 202 0016 C046     		.align	2
 203              	.L6:
 204 0018 00200040 		.word	1073750016
 205              		.cfi_endproc
 206              	.LFE45:
 208              		.section	.text.encoder_init,"ax",%progbits
 209              		.align	1
 210              		.global	encoder_init
 211              		.syntax unified
 212              		.code	16
 213              		.thumb_func
 215              	encoder_init:
 216              	.LFB46:
  67:Src/motor.c   **** 
  68:Src/motor.c   **** // Sets up encoder interface to read motor speed
  69:Src/motor.c   **** void encoder_init(void) {
 217              		.loc 2 69 25 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 6


  70:Src/motor.c   ****     
  71:Src/motor.c   ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  72:Src/motor.c   ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 222              		.loc 2 72 5 view .LVU61
 223              		.loc 2 72 8 is_stmt 0 view .LVU62
 224 0000 264A     		ldr	r2, .L9
 225 0002 5169     		ldr	r1, [r2, #20]
 226              		.loc 2 72 17 view .LVU63
 227 0004 8023     		movs	r3, #128
 228 0006 DB02     		lsls	r3, r3, #11
 229 0008 0B43     		orrs	r3, r1
 230 000a 5361     		str	r3, [r2, #20]
  73:Src/motor.c   **** 
  74:Src/motor.c   ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 231              		.loc 2 74 5 is_stmt 1 view .LVU64
 232              		.loc 2 74 10 is_stmt 0 view .LVU65
 233 000c 244B     		ldr	r3, .L9+4
 234 000e 1968     		ldr	r1, [r3]
 235              		.loc 2 74 18 view .LVU66
 236 0010 2448     		ldr	r0, .L9+8
 237 0012 0140     		ands	r1, r0
 238 0014 1960     		str	r1, [r3]
  75:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 239              		.loc 2 75 5 is_stmt 1 view .LVU67
 240              		.loc 2 75 10 is_stmt 0 view .LVU68
 241 0016 1868     		ldr	r0, [r3]
 242              		.loc 2 75 18 view .LVU69
 243 0018 A021     		movs	r1, #160
 244 001a 0901     		lsls	r1, r1, #4
 245 001c 0143     		orrs	r1, r0
 246 001e 1960     		str	r1, [r3]
  76:Src/motor.c   ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 247              		.loc 2 76 5 is_stmt 1 view .LVU70
 248              		.loc 2 76 15 is_stmt 0 view .LVU71
 249 0020 186A     		ldr	r0, [r3, #32]
 250              		.loc 2 76 19 view .LVU72
 251 0022 8821     		movs	r1, #136
 252 0024 4903     		lsls	r1, r1, #13
 253 0026 0143     		orrs	r1, r0
 254 0028 1962     		str	r1, [r3, #32]
  77:Src/motor.c   **** 
  78:Src/motor.c   ****     // Set up encoder interface (TIM3 encoder input mode)
  79:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 255              		.loc 2 79 5 is_stmt 1 view .LVU73
 256              		.loc 2 79 8 is_stmt 0 view .LVU74
 257 002a D369     		ldr	r3, [r2, #28]
 258              		.loc 2 79 18 view .LVU75
 259 002c 0221     		movs	r1, #2
 260 002e 0B43     		orrs	r3, r1
 261 0030 D361     		str	r3, [r2, #28]
  80:Src/motor.c   ****     TIM3->CCMR1 = 0;
 262              		.loc 2 80 5 is_stmt 1 view .LVU76
 263              		.loc 2 80 17 is_stmt 0 view .LVU77
 264 0032 1D4B     		ldr	r3, .L9+12
 265 0034 0021     		movs	r1, #0
 266 0036 9961     		str	r1, [r3, #24]
  81:Src/motor.c   ****     TIM3->CCER = 0;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 7


 267              		.loc 2 81 5 is_stmt 1 view .LVU78
 268              		.loc 2 81 16 is_stmt 0 view .LVU79
 269 0038 1962     		str	r1, [r3, #32]
  82:Src/motor.c   ****     TIM3->SMCR = 0;
 270              		.loc 2 82 5 is_stmt 1 view .LVU80
 271              		.loc 2 82 16 is_stmt 0 view .LVU81
 272 003a 9960     		str	r1, [r3, #8]
  83:Src/motor.c   ****     TIM3->CR1 = 0;
 273              		.loc 2 83 5 is_stmt 1 view .LVU82
 274              		.loc 2 83 15 is_stmt 0 view .LVU83
 275 003c 1960     		str	r1, [r3]
  84:Src/motor.c   **** 
  85:Src/motor.c   ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 276              		.loc 2 85 5 is_stmt 1 view .LVU84
 277              		.loc 2 85 9 is_stmt 0 view .LVU85
 278 003e 9869     		ldr	r0, [r3, #24]
 279              		.loc 2 85 17 view .LVU86
 280 0040 0221     		movs	r1, #2
 281 0042 FF31     		adds	r1, r1, #255
 282 0044 0143     		orrs	r1, r0
 283 0046 9961     		str	r1, [r3, #24]
  86:Src/motor.c   ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 284              		.loc 2 86 5 is_stmt 1 view .LVU87
 285              		.loc 2 86 9 is_stmt 0 view .LVU88
 286 0048 9968     		ldr	r1, [r3, #8]
 287              		.loc 2 86 16 view .LVU89
 288 004a 0320     		movs	r0, #3
 289 004c 0143     		orrs	r1, r0
 290 004e 9960     		str	r1, [r3, #8]
  87:Src/motor.c   ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 291              		.loc 2 87 5 is_stmt 1 view .LVU90
 292              		.loc 2 87 15 is_stmt 0 view .LVU91
 293 0050 1649     		ldr	r1, .L9+16
 294 0052 D962     		str	r1, [r3, #44]
  88:Src/motor.c   ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 295              		.loc 2 88 5 is_stmt 1 view .LVU92
 296              		.loc 2 88 15 is_stmt 0 view .LVU93
 297 0054 1649     		ldr	r1, .L9+20
 298 0056 5962     		str	r1, [r3, #36]
  89:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  90:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  91:Src/motor.c   ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 299              		.loc 2 91 5 is_stmt 1 view .LVU94
 300              		.loc 2 91 9 is_stmt 0 view .LVU95
 301 0058 1868     		ldr	r0, [r3]
 302              		.loc 2 91 15 view .LVU96
 303 005a 0121     		movs	r1, #1
 304 005c 0843     		orrs	r0, r1
 305 005e 1860     		str	r0, [r3]
  92:Src/motor.c   **** 
  93:Src/motor.c   ****     // Configure a second timer (TIM6) to fire an ISR on update event
  94:Src/motor.c   ****     // Used to periodically check and update speed variable
  95:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 306              		.loc 2 95 5 is_stmt 1 view .LVU97
 307              		.loc 2 95 8 is_stmt 0 view .LVU98
 308 0060 D369     		ldr	r3, [r2, #28]
 309              		.loc 2 95 18 view .LVU99
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 8


 310 0062 1020     		movs	r0, #16
 311 0064 0343     		orrs	r3, r0
 312 0066 D361     		str	r3, [r2, #28]
  96:Src/motor.c   ****     
  97:Src/motor.c   ****     // Select PSC and ARR values that give an appropriate interrupt rate
  98:Src/motor.c   ****     TIM6->PSC = 11;
 313              		.loc 2 98 5 is_stmt 1 view .LVU100
 314              		.loc 2 98 15 is_stmt 0 view .LVU101
 315 0068 124B     		ldr	r3, .L9+24
 316 006a 0B22     		movs	r2, #11
 317 006c 9A62     		str	r2, [r3, #40]
  99:Src/motor.c   ****     TIM6->ARR = 30000;
 318              		.loc 2 99 5 is_stmt 1 view .LVU102
 319              		.loc 2 99 15 is_stmt 0 view .LVU103
 320 006e 124A     		ldr	r2, .L9+28
 321 0070 DA62     		str	r2, [r3, #44]
 100:Src/motor.c   ****     
 101:Src/motor.c   ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 322              		.loc 2 101 5 is_stmt 1 view .LVU104
 323              		.loc 2 101 9 is_stmt 0 view .LVU105
 324 0072 DA68     		ldr	r2, [r3, #12]
 325              		.loc 2 101 16 view .LVU106
 326 0074 0A43     		orrs	r2, r1
 327 0076 DA60     		str	r2, [r3, #12]
 102:Src/motor.c   ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 328              		.loc 2 102 5 is_stmt 1 view .LVU107
 329              		.loc 2 102 9 is_stmt 0 view .LVU108
 330 0078 1A68     		ldr	r2, [r3]
 331              		.loc 2 102 15 view .LVU109
 332 007a 0A43     		orrs	r2, r1
 333 007c 1A60     		str	r2, [r3]
 103:Src/motor.c   **** 
 104:Src/motor.c   ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 334              		.loc 2 104 5 is_stmt 1 view .LVU110
 335              	.LVL3:
 336              	.LBB6:
 337              	.LBI6:
 338              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 9


  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 10


  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 11


 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 12


 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 13


 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 14


 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 15


 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 16


 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 17


 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 18


 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 19


 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 339              		.loc 3 623 22 view .LVU111
 340              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 341              		.loc 3 625 3 view .LVU112
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 342              		.loc 3 627 5 view .LVU113
 343              		.loc 3 627 20 is_stmt 0 view .LVU114
 344 007e 0F4B     		ldr	r3, .L9+32
 345 0080 8022     		movs	r2, #128
 346 0082 9202     		lsls	r2, r2, #10
 347 0084 1A60     		str	r2, [r3]
 348              	.LVL4:
 349              		.loc 3 627 20 view .LVU115
 350              	.LBE7:
 351              	.LBE6:
 105:Src/motor.c   ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 352              		.loc 2 105 5 is_stmt 1 view .LVU116
 353              	.LBB8:
 354              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 20


 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 21


 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 355              		.loc 3 730 22 view .LVU117
 356              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 357              		.loc 3 732 3 view .LVU118
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 358              		.loc 3 734 5 view .LVU119
 359              		.loc 3 734 52 is_stmt 0 view .LVU120
 360 0086 C420     		movs	r0, #196
 361 0088 8000     		lsls	r0, r0, #2
 362 008a 1958     		ldr	r1, [r3, r0]
 363              		.loc 3 734 33 view .LVU121
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 22


 364 008c 0C4A     		ldr	r2, .L9+36
 365 008e 1140     		ands	r1, r2
 366              		.loc 3 734 102 view .LVU122
 367 0090 8022     		movs	r2, #128
 368 0092 1202     		lsls	r2, r2, #8
 369 0094 0A43     		orrs	r2, r1
 370              		.loc 3 734 30 view .LVU123
 371 0096 1A50     		str	r2, [r3, r0]
 372              	.LVL5:
 373              		.loc 3 734 30 view .LVU124
 374              	.LBE9:
 375              	.LBE8:
 106:Src/motor.c   **** }
 376              		.loc 2 106 1 view .LVU125
 377              		@ sp needed
 378 0098 7047     		bx	lr
 379              	.L10:
 380 009a C046     		.align	2
 381              	.L9:
 382 009c 00100240 		.word	1073876992
 383 00a0 00040048 		.word	1207960576
 384 00a4 FFFAFFFF 		.word	-1281
 385 00a8 00040040 		.word	1073742848
 386 00ac FFFF0000 		.word	65535
 387 00b0 FF7F0000 		.word	32767
 388 00b4 00100040 		.word	1073745920
 389 00b8 30750000 		.word	30000
 390 00bc 00E100E0 		.word	-536813312
 391 00c0 FF00FFFF 		.word	-65281
 392              		.cfi_endproc
 393              	.LFE46:
 395              		.section	.text.ADC_init,"ax",%progbits
 396              		.align	1
 397              		.global	ADC_init
 398              		.syntax unified
 399              		.code	16
 400              		.thumb_func
 402              	ADC_init:
 403              	.LFB48:
 107:Src/motor.c   **** 
 108:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 109:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 110:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 111:Src/motor.c   ****      * Note the motor speed is signed! Motor can be run in reverse.
 112:Src/motor.c   ****      * Speed is measured by how far the counter moved from center point
 113:Src/motor.c   ****      */
 114:Src/motor.c   ****     motor_speed = (TIM3->CNT - 0x7FFF);
 115:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 116:Src/motor.c   ****     
 117:Src/motor.c   ****     // Call the PI update function
 118:Src/motor.c   ****     PI_update();
 119:Src/motor.c   **** 
 120:Src/motor.c   ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 121:Src/motor.c   **** }
 122:Src/motor.c   **** 
 123:Src/motor.c   **** void ADC_init(void) {
 404              		.loc 2 123 21 is_stmt 1 view -0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 23


 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		@ link register save eliminated.
 124:Src/motor.c   **** 
 125:Src/motor.c   ****     // Configure PA1 for ADC input (used for current monitoring)
 126:Src/motor.c   ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 409              		.loc 2 126 5 view .LVU127
 410              		.loc 2 126 10 is_stmt 0 view .LVU128
 411 0000 9022     		movs	r2, #144
 412 0002 D205     		lsls	r2, r2, #23
 413 0004 1368     		ldr	r3, [r2]
 414              		.loc 2 126 18 view .LVU129
 415 0006 0C21     		movs	r1, #12
 416 0008 0B43     		orrs	r3, r1
 417 000a 1360     		str	r3, [r2]
 127:Src/motor.c   **** 
 128:Src/motor.c   ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 129:Src/motor.c   ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 418              		.loc 2 129 5 is_stmt 1 view .LVU130
 419              		.loc 2 129 8 is_stmt 0 view .LVU131
 420 000c 154A     		ldr	r2, .L15
 421 000e 9169     		ldr	r1, [r2, #24]
 422              		.loc 2 129 18 view .LVU132
 423 0010 8023     		movs	r3, #128
 424 0012 9B00     		lsls	r3, r3, #2
 425 0014 0B43     		orrs	r3, r1
 426 0016 9361     		str	r3, [r2, #24]
 130:Src/motor.c   **** 
 131:Src/motor.c   ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 427              		.loc 2 131 5 is_stmt 1 view .LVU133
 428              		.loc 2 131 17 is_stmt 0 view .LVU134
 429 0018 134B     		ldr	r3, .L15+4
 430 001a 0021     		movs	r1, #0
 431 001c D960     		str	r1, [r3, #12]
 132:Src/motor.c   ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 432              		.loc 2 132 5 is_stmt 1 view .LVU135
 433              		.loc 2 132 9 is_stmt 0 view .LVU136
 434 001e D868     		ldr	r0, [r3, #12]
 435              		.loc 2 132 17 view .LVU137
 436 0020 8022     		movs	r2, #128
 437 0022 9201     		lsls	r2, r2, #6
 438 0024 0243     		orrs	r2, r0
 439 0026 DA60     		str	r2, [r3, #12]
 133:Src/motor.c   ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 440              		.loc 2 133 5 is_stmt 1 view .LVU138
 441              		.loc 2 133 9 is_stmt 0 view .LVU139
 442 0028 9A6A     		ldr	r2, [r3, #40]
 443              		.loc 2 133 18 view .LVU140
 444 002a 0220     		movs	r0, #2
 445 002c 0243     		orrs	r2, r0
 446 002e 9A62     		str	r2, [r3, #40]
 134:Src/motor.c   **** 
 135:Src/motor.c   ****     ADC1->CR = 0;
 447              		.loc 2 135 5 is_stmt 1 view .LVU141
 448              		.loc 2 135 14 is_stmt 0 view .LVU142
 449 0030 9960     		str	r1, [r3, #8]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 24


 136:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 450              		.loc 2 136 5 is_stmt 1 view .LVU143
 451              		.loc 2 136 9 is_stmt 0 view .LVU144
 452 0032 9968     		ldr	r1, [r3, #8]
 453              		.loc 2 136 14 view .LVU145
 454 0034 8022     		movs	r2, #128
 455 0036 1206     		lsls	r2, r2, #24
 456 0038 0A43     		orrs	r2, r1
 457 003a 9A60     		str	r2, [r3, #8]
 137:Src/motor.c   ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 458              		.loc 2 137 5 is_stmt 1 view .LVU146
 459              	.L12:
 460              		.loc 2 137 11 discriminator 1 view .LVU147
 461              		.loc 2 137 15 is_stmt 0 discriminator 1 view .LVU148
 462 003c 0A4B     		ldr	r3, .L15+4
 463 003e 9B68     		ldr	r3, [r3, #8]
 464              		.loc 2 137 11 discriminator 1 view .LVU149
 465 0040 002B     		cmp	r3, #0
 466 0042 FBDB     		blt	.L12
 138:Src/motor.c   **** 
 139:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 467              		.loc 2 139 5 is_stmt 1 view .LVU150
 468              		.loc 2 139 9 is_stmt 0 view .LVU151
 469 0044 084A     		ldr	r2, .L15+4
 470 0046 9368     		ldr	r3, [r2, #8]
 471              		.loc 2 139 14 view .LVU152
 472 0048 0121     		movs	r1, #1
 473 004a 0B43     		orrs	r3, r1
 474 004c 9360     		str	r3, [r2, #8]
 140:Src/motor.c   ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 475              		.loc 2 140 5 is_stmt 1 view .LVU153
 476              	.L13:
 477              		.loc 2 140 11 discriminator 1 view .LVU154
 478              		.loc 2 140 17 is_stmt 0 discriminator 1 view .LVU155
 479 004e 064B     		ldr	r3, .L15+4
 480 0050 1B68     		ldr	r3, [r3]
 481              		.loc 2 140 11 discriminator 1 view .LVU156
 482 0052 DB07     		lsls	r3, r3, #31
 483 0054 FBD5     		bpl	.L13
 141:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 484              		.loc 2 141 5 is_stmt 1 view .LVU157
 485              		.loc 2 141 9 is_stmt 0 view .LVU158
 486 0056 044A     		ldr	r2, .L15+4
 487 0058 9368     		ldr	r3, [r2, #8]
 488              		.loc 2 141 14 view .LVU159
 489 005a 0421     		movs	r1, #4
 490 005c 0B43     		orrs	r3, r1
 491 005e 9360     		str	r3, [r2, #8]
 142:Src/motor.c   **** }
 492              		.loc 2 142 1 view .LVU160
 493              		@ sp needed
 494 0060 7047     		bx	lr
 495              	.L16:
 496 0062 C046     		.align	2
 497              	.L15:
 498 0064 00100240 		.word	1073876992
 499 0068 00240140 		.word	1073816576
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 25


 500              		.cfi_endproc
 501              	.LFE48:
 503              		.section	.text.motor_init,"ax",%progbits
 504              		.align	1
 505              		.global	motor_init
 506              		.syntax unified
 507              		.code	16
 508              		.thumb_func
 510              	motor_init:
 511              	.LFB43:
  19:Src/motor.c   ****     pwm_init();
 512              		.loc 2 19 23 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516 0000 10B5     		push	{r4, lr}
 517              	.LCFI1:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 4, -8
 520              		.cfi_offset 14, -4
  20:Src/motor.c   ****     encoder_init();
 521              		.loc 2 20 5 view .LVU162
 522 0002 FFF7FEFF 		bl	pwm_init
 523              	.LVL6:
  21:Src/motor.c   ****     ADC_init();
 524              		.loc 2 21 5 view .LVU163
 525 0006 FFF7FEFF 		bl	encoder_init
 526              	.LVL7:
  22:Src/motor.c   **** }
 527              		.loc 2 22 5 view .LVU164
 528 000a FFF7FEFF 		bl	ADC_init
 529              	.LVL8:
  23:Src/motor.c   **** 
 530              		.loc 2 23 1 is_stmt 0 view .LVU165
 531              		@ sp needed
 532 000e 10BD     		pop	{r4, pc}
 533              		.cfi_endproc
 534              	.LFE43:
 536              		.section	.text.PI_update,"ax",%progbits
 537              		.align	1
 538              		.global	PI_update
 539              		.syntax unified
 540              		.code	16
 541              		.thumb_func
 543              	PI_update:
 544              	.LFB49:
 143:Src/motor.c   **** 
 144:Src/motor.c   **** void PI_update(void) {
 545              		.loc 2 144 22 is_stmt 1 view -0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549 0000 10B5     		push	{r4, lr}
 550              	.LCFI2:
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 4, -8
 553              		.cfi_offset 14, -4
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 26


 145:Src/motor.c   ****     
 146:Src/motor.c   ****     /* Run PI control loop
 147:Src/motor.c   ****      *
 148:Src/motor.c   ****      * Make sure to use the indicated variable names. This allows STMStudio to monitor
 149:Src/motor.c   ****      * the condition of the system!
 150:Src/motor.c   ****      *
 151:Src/motor.c   ****      * target_rpm -> target motor speed in RPM
 152:Src/motor.c   ****      * motor_speed -> raw motor speed in encoder counts
 153:Src/motor.c   ****      * error -> error signal (difference between measured speed and target)
 154:Src/motor.c   ****      * error_integral -> integrated error signal
 155:Src/motor.c   ****      * Kp -> Proportional Gain
 156:Src/motor.c   ****      * Ki -> Integral Gain
 157:Src/motor.c   ****      * output -> raw output signal from PI controller
 158:Src/motor.c   ****      * duty_cycle -> used to report the duty cycle of the system 
 159:Src/motor.c   ****      * adc_value -> raw ADC counts to report current
 160:Src/motor.c   ****      *
 161:Src/motor.c   ****      */
 162:Src/motor.c   ****     
 163:Src/motor.c   ****     /// TODO: calculate error signal and write to "error" variable
 164:Src/motor.c   ****     
 165:Src/motor.c   ****     /* Hint: Remember that your calculated motor speed may not be directly in RPM!
 166:Src/motor.c   ****      *       You will need to convert the target or encoder speeds to the same units.
 167:Src/motor.c   ****      *       I recommend converting to whatever units result in larger values, gives
 168:Src/motor.c   ****      *       more resolution.
 169:Src/motor.c   ****      */
 170:Src/motor.c   ****     
 171:Src/motor.c   ****     
 172:Src/motor.c   ****     /// TODO: Calculate integral portion of PI controller, write to "error_integral" variable
 173:Src/motor.c   ****     
 174:Src/motor.c   ****     /// TODO: Clamp the value of the integral to a limited positive range
 175:Src/motor.c   ****     
 176:Src/motor.c   ****     /* Hint: The value clamp is needed to prevent excessive "windup" in the integral.
 177:Src/motor.c   ****      *       You'll read more about this for the post-lab. The exact value is arbitrary
 178:Src/motor.c   ****      *       but affects the PI tuning.
 179:Src/motor.c   ****      *       Recommend that you clamp between 0 and 3200 (what is used in the lab solution)
 180:Src/motor.c   ****      */
 181:Src/motor.c   ****     
 182:Src/motor.c   ****     /// TODO: Calculate proportional portion, add integral and write to "output" variable
 183:Src/motor.c   ****     
 184:Src/motor.c   ****     int16_t output = 0; // Change this!
 554              		.loc 2 184 5 view .LVU167
 555              	.LVL9:
 185:Src/motor.c   ****     
 186:Src/motor.c   ****     /* Because the calculated values for the PI controller are significantly larger than 
 187:Src/motor.c   ****      * the allowable range for duty cycle, you'll need to divide the result down into 
 188:Src/motor.c   ****      * an appropriate range. (Maximum integral clamp / X = 100% duty cycle)
 189:Src/motor.c   ****      * 
 190:Src/motor.c   ****      * Hint: If you chose 3200 for the integral clamp you should divide by 32 (right shift by 5 bit
 191:Src/motor.c   ****      *       this will give you an output of 100 at maximum integral "windup".
 192:Src/motor.c   ****      *
 193:Src/motor.c   ****      * This division also turns the above calculations into pseudo fixed-point. This is because
 194:Src/motor.c   ****      * the lowest 5 bits act as if they were below the decimal point until the division where they
 195:Src/motor.c   ****      * were truncated off to result in an integer value. 
 196:Src/motor.c   ****      *
 197:Src/motor.c   ****      * Technically most of this is arbitrary, in a real system you would want to use a fixed-point
 198:Src/motor.c   ****      * math library. The main difference that these values make is the difference in the gain value
 199:Src/motor.c   ****      * required for tuning.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 27


 200:Src/motor.c   ****      */
 201:Src/motor.c   **** 
 202:Src/motor.c   ****      /// TODO: Divide the output into the proper range for output adjustment
 203:Src/motor.c   ****      
 204:Src/motor.c   ****      /// TODO: Clamp the output value between 0 and 100 
 205:Src/motor.c   ****     
 206:Src/motor.c   ****     pwm_setDutyCycle(output);
 556              		.loc 2 206 5 view .LVU168
 557 0002 0020     		movs	r0, #0
 558 0004 FFF7FEFF 		bl	pwm_setDutyCycle
 559              	.LVL10:
 207:Src/motor.c   ****     duty_cycle = output;            // For debug viewing
 560              		.loc 2 207 5 view .LVU169
 561              		.loc 2 207 16 is_stmt 0 view .LVU170
 562 0008 064B     		ldr	r3, .L21
 563 000a 0022     		movs	r2, #0
 564 000c 1A70     		strb	r2, [r3]
 208:Src/motor.c   **** 
 209:Src/motor.c   ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 210:Src/motor.c   ****     // will be performed by STMStudio
 211:Src/motor.c   ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 565              		.loc 2 211 5 is_stmt 1 view .LVU171
 566              		.loc 2 211 12 is_stmt 0 view .LVU172
 567 000e 064B     		ldr	r3, .L21+4
 568 0010 1B68     		ldr	r3, [r3]
 569              		.loc 2 211 7 view .LVU173
 570 0012 5B07     		lsls	r3, r3, #29
 571 0014 04D5     		bpl	.L18
 212:Src/motor.c   ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
 572              		.loc 2 212 9 is_stmt 1 view .LVU174
 573              		.loc 2 212 25 is_stmt 0 view .LVU175
 574 0016 044B     		ldr	r3, .L21+4
 575 0018 1B6C     		ldr	r3, [r3, #64]
 576              		.loc 2 212 19 view .LVU176
 577 001a 5BB2     		sxtb	r3, r3
 578 001c 034A     		ldr	r2, .L21+8
 579 001e 1370     		strb	r3, [r2]
 580              	.L18:
 213:Src/motor.c   ****     }
 214:Src/motor.c   **** }
 581              		.loc 2 214 1 view .LVU177
 582              		@ sp needed
 583 0020 10BD     		pop	{r4, pc}
 584              	.L22:
 585 0022 C046     		.align	2
 586              	.L21:
 587 0024 00000000 		.word	duty_cycle
 588 0028 00240140 		.word	1073816576
 589 002c 00000000 		.word	adc_value
 590              		.cfi_endproc
 591              	.LFE49:
 593              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 594              		.align	1
 595              		.global	TIM6_DAC_IRQHandler
 596              		.syntax unified
 597              		.code	16
 598              		.thumb_func
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 28


 600              	TIM6_DAC_IRQHandler:
 601              	.LFB47:
 109:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 602              		.loc 2 109 32 is_stmt 1 view -0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606 0000 10B5     		push	{r4, lr}
 607              	.LCFI3:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 4, -8
 610              		.cfi_offset 14, -4
 114:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 611              		.loc 2 114 5 view .LVU179
 114:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 612              		.loc 2 114 24 is_stmt 0 view .LVU180
 613 0002 094A     		ldr	r2, .L24
 614 0004 536A     		ldr	r3, [r2, #36]
 114:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 615              		.loc 2 114 30 view .LVU181
 616 0006 0949     		ldr	r1, .L24+4
 617 0008 8C46     		mov	ip, r1
 618 000a 6344     		add	r3, r3, ip
 619 000c 1BB2     		sxth	r3, r3
 114:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 620              		.loc 2 114 17 view .LVU182
 621 000e 0849     		ldr	r1, .L24+8
 622 0010 0B80     		strh	r3, [r1]
 115:Src/motor.c   ****     
 623              		.loc 2 115 5 is_stmt 1 view .LVU183
 115:Src/motor.c   ****     
 624              		.loc 2 115 15 is_stmt 0 view .LVU184
 625 0012 084B     		ldr	r3, .L24+12
 626 0014 5362     		str	r3, [r2, #36]
 118:Src/motor.c   **** 
 627              		.loc 2 118 5 is_stmt 1 view .LVU185
 628 0016 FFF7FEFF 		bl	PI_update
 629              	.LVL11:
 120:Src/motor.c   **** }
 630              		.loc 2 120 5 view .LVU186
 120:Src/motor.c   **** }
 631              		.loc 2 120 9 is_stmt 0 view .LVU187
 632 001a 074A     		ldr	r2, .L24+16
 633 001c 1369     		ldr	r3, [r2, #16]
 120:Src/motor.c   **** }
 634              		.loc 2 120 14 view .LVU188
 635 001e 0121     		movs	r1, #1
 636 0020 8B43     		bics	r3, r1
 637 0022 1361     		str	r3, [r2, #16]
 121:Src/motor.c   **** 
 638              		.loc 2 121 1 view .LVU189
 639              		@ sp needed
 640 0024 10BD     		pop	{r4, pc}
 641              	.L25:
 642 0026 C046     		.align	2
 643              	.L24:
 644 0028 00040040 		.word	1073742848
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 29


 645 002c 0180FFFF 		.word	-32767
 646 0030 00000000 		.word	motor_speed
 647 0034 FF7F0000 		.word	32767
 648 0038 00100040 		.word	1073745920
 649              		.cfi_endproc
 650              	.LFE47:
 652              		.section	.text.LED_init,"ax",%progbits
 653              		.align	1
 654              		.global	LED_init
 655              		.syntax unified
 656              		.code	16
 657              		.thumb_func
 659              	LED_init:
 660              	.LFB50:
   1:Src/main.c    **** 
   2:Src/main.c    **** #include <stdio.h>
   3:Src/main.c    **** #include <stdlib.h>
   4:Src/main.c    **** #include "stm32f0xx.h"
   5:Src/main.c    **** #include "motor.h"
   6:Src/main.c    **** #include "motor.c"
   7:Src/main.c    **** #include "stm32f072xb.h"
   8:Src/main.c    **** 
   9:Src/main.c    **** /* ------------------------------------------------------------------------------------------------
  10:Src/main.c    ****  *  Global Variable Declarations
  11:Src/main.c    ****  *  -----------------------------------------------------------------------------------------------
  12:Src/main.c    ****  */
  13:Src/main.c    **** volatile uint32_t debouncer;
  14:Src/main.c    **** 
  15:Src/main.c    **** /* ------------------------------------------------------------------------------------------------
  16:Src/main.c    ****  *  Miscellaneous Core Functions
  17:Src/main.c    ****  *  -----------------------------------------------------------------------------------------------
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** void LED_init(void) {
 661              		.loc 1 20 21 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		@ link register save eliminated.
  21:Src/main.c    ****     // Initialize PC8 and PC9 for LED's
  22:Src/main.c    ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;                                          // Enable periphera
 666              		.loc 1 22 5 view .LVU191
 667              		.loc 1 22 8 is_stmt 0 view .LVU192
 668 0000 0D4A     		ldr	r2, .L27
 669 0002 5169     		ldr	r1, [r2, #20]
 670              		.loc 1 22 17 view .LVU193
 671 0004 8023     		movs	r3, #128
 672 0006 1B03     		lsls	r3, r3, #12
 673 0008 0B43     		orrs	r3, r1
 674 000a 5361     		str	r3, [r2, #20]
  23:Src/main.c    ****     GPIOC->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;                  // Set PC8 & PC9 to
 675              		.loc 1 23 5 is_stmt 1 view .LVU194
 676              		.loc 1 23 10 is_stmt 0 view .LVU195
 677 000c 0B4B     		ldr	r3, .L27+4
 678 000e 1968     		ldr	r1, [r3]
 679              		.loc 1 23 18 view .LVU196
 680 0010 A022     		movs	r2, #160
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 30


 681 0012 D202     		lsls	r2, r2, #11
 682 0014 0A43     		orrs	r2, r1
 683 0016 1A60     		str	r2, [r3]
  24:Src/main.c    ****     GPIOC->OTYPER &= ~(GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_9);                    // Set to push-pull
 684              		.loc 1 24 5 is_stmt 1 view .LVU197
 685              		.loc 1 24 10 is_stmt 0 view .LVU198
 686 0018 5A68     		ldr	r2, [r3, #4]
 687              		.loc 1 24 19 view .LVU199
 688 001a 0949     		ldr	r1, .L27+8
 689 001c 0A40     		ands	r2, r1
 690 001e 5A60     		str	r2, [r3, #4]
  25:Src/main.c    ****     GPIOC->OSPEEDR &= ~((GPIO_OSPEEDR_OSPEEDR8_0 | GPIO_OSPEEDR_OSPEEDR8_1) |
 691              		.loc 1 25 5 is_stmt 1 view .LVU200
 692              		.loc 1 25 10 is_stmt 0 view .LVU201
 693 0020 9A68     		ldr	r2, [r3, #8]
 694              		.loc 1 25 20 view .LVU202
 695 0022 0848     		ldr	r0, .L27+12
 696 0024 0240     		ands	r2, r0
 697 0026 9A60     		str	r2, [r3, #8]
  26:Src/main.c    ****                         (GPIO_OSPEEDR_OSPEEDR9_0 | GPIO_OSPEEDR_OSPEEDR9_1));   // Set to low speed
  27:Src/main.c    ****     GPIOC->PUPDR &= ~((GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR8_1) |
 698              		.loc 1 27 5 is_stmt 1 view .LVU203
 699              		.loc 1 27 10 is_stmt 0 view .LVU204
 700 0028 DA68     		ldr	r2, [r3, #12]
 701              		.loc 1 27 18 view .LVU205
 702 002a 0240     		ands	r2, r0
 703 002c DA60     		str	r2, [r3, #12]
  28:Src/main.c    ****                       (GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR9_1));             // Set to no pull-u
  29:Src/main.c    ****     GPIOC->ODR &= ~(GPIO_ODR_8 | GPIO_ODR_9);                                   // Shut off LED's
 704              		.loc 1 29 5 is_stmt 1 view .LVU206
 705              		.loc 1 29 10 is_stmt 0 view .LVU207
 706 002e 5A69     		ldr	r2, [r3, #20]
 707              		.loc 1 29 16 view .LVU208
 708 0030 0A40     		ands	r2, r1
 709 0032 5A61     		str	r2, [r3, #20]
  30:Src/main.c    **** }
 710              		.loc 1 30 1 view .LVU209
 711              		@ sp needed
 712 0034 7047     		bx	lr
 713              	.L28:
 714 0036 C046     		.align	2
 715              	.L27:
 716 0038 00100240 		.word	1073876992
 717 003c 00080048 		.word	1207961600
 718 0040 FFFCFFFF 		.word	-769
 719 0044 FFFFF0FF 		.word	-983041
 720              		.cfi_endproc
 721              	.LFE50:
 723              		.section	.text.button_init,"ax",%progbits
 724              		.align	1
 725              		.global	button_init
 726              		.syntax unified
 727              		.code	16
 728              		.thumb_func
 730              	button_init:
 731              	.LFB51:
  31:Src/main.c    **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 31


  32:Src/main.c    **** void  button_init(void) {
 732              		.loc 1 32 25 is_stmt 1 view -0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              		@ link register save eliminated.
  33:Src/main.c    ****     // Initialize PA0 for button input
  34:Src/main.c    ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;                                          // Enable periphera
 737              		.loc 1 34 5 view .LVU211
 738              		.loc 1 34 8 is_stmt 0 view .LVU212
 739 0000 0A4A     		ldr	r2, .L30
 740 0002 5169     		ldr	r1, [r2, #20]
 741              		.loc 1 34 17 view .LVU213
 742 0004 8023     		movs	r3, #128
 743 0006 9B02     		lsls	r3, r3, #10
 744 0008 0B43     		orrs	r3, r1
 745 000a 5361     		str	r3, [r2, #20]
  35:Src/main.c    ****     GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1);               // Set PA0 to input
 746              		.loc 1 35 5 is_stmt 1 view .LVU214
 747              		.loc 1 35 10 is_stmt 0 view .LVU215
 748 000c 9022     		movs	r2, #144
 749 000e D205     		lsls	r2, r2, #23
 750 0010 1368     		ldr	r3, [r2]
 751              		.loc 1 35 18 view .LVU216
 752 0012 0321     		movs	r1, #3
 753 0014 8B43     		bics	r3, r1
 754 0016 1360     		str	r3, [r2]
  36:Src/main.c    ****     GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0_0 | GPIO_OSPEEDR_OSPEEDR0_1);     // Set to low speed
 755              		.loc 1 36 5 is_stmt 1 view .LVU217
 756              		.loc 1 36 10 is_stmt 0 view .LVU218
 757 0018 054B     		ldr	r3, .L30+4
 758 001a 9A68     		ldr	r2, [r3, #8]
 759              		.loc 1 36 20 view .LVU219
 760 001c 8A43     		bics	r2, r1
 761 001e 9A60     		str	r2, [r3, #8]
  37:Src/main.c    ****     GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_1;                                        // Set to pull-down
 762              		.loc 1 37 5 is_stmt 1 view .LVU220
 763              		.loc 1 37 10 is_stmt 0 view .LVU221
 764 0020 DA68     		ldr	r2, [r3, #12]
 765              		.loc 1 37 18 view .LVU222
 766 0022 0139     		subs	r1, r1, #1
 767 0024 0A43     		orrs	r2, r1
 768 0026 DA60     		str	r2, [r3, #12]
  38:Src/main.c    **** }
 769              		.loc 1 38 1 view .LVU223
 770              		@ sp needed
 771 0028 7047     		bx	lr
 772              	.L31:
 773 002a C046     		.align	2
 774              	.L30:
 775 002c 00100240 		.word	1073876992
 776 0030 00080048 		.word	1207961600
 777              		.cfi_endproc
 778              	.LFE51:
 780              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 781              		.align	1
 782              		.global	HAL_SYSTICK_Callback
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 32


 783              		.syntax unified
 784              		.code	16
 785              		.thumb_func
 787              	HAL_SYSTICK_Callback:
 788              	.LFB52:
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Called by SysTick Interrupt
  41:Src/main.c    ****  * Performs button debouncing, changes wave type on button rising edge
  42:Src/main.c    ****  * Updates frequency output from ADC value
  43:Src/main.c    ****  */
  44:Src/main.c    **** void HAL_SYSTICK_Callback(void) {
 789              		.loc 1 44 33 is_stmt 1 view -0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              		@ link register save eliminated.
  45:Src/main.c    ****     // Remember that this function is called by the SysTick interrupt
  46:Src/main.c    ****     // You can't call any functions in here that use delay
  47:Src/main.c    **** 
  48:Src/main.c    ****     debouncer = (debouncer << 1);
 794              		.loc 1 48 5 view .LVU225
 795              		.loc 1 48 28 is_stmt 0 view .LVU226
 796 0000 154A     		ldr	r2, .L42
 797 0002 1368     		ldr	r3, [r2]
 798 0004 5B00     		lsls	r3, r3, #1
 799              		.loc 1 48 15 view .LVU227
 800 0006 1360     		str	r3, [r2]
  49:Src/main.c    ****     if(GPIOA->IDR & (1 << 0)) {
 801              		.loc 1 49 5 is_stmt 1 view .LVU228
 802              		.loc 1 49 13 is_stmt 0 view .LVU229
 803 0008 9023     		movs	r3, #144
 804 000a DB05     		lsls	r3, r3, #23
 805 000c 1B69     		ldr	r3, [r3, #16]
 806              		.loc 1 49 7 view .LVU230
 807 000e DB07     		lsls	r3, r3, #31
 808 0010 03D5     		bpl	.L33
  50:Src/main.c    ****         debouncer |= 0x1;
 809              		.loc 1 50 9 is_stmt 1 view .LVU231
 810              		.loc 1 50 19 is_stmt 0 view .LVU232
 811 0012 1368     		ldr	r3, [r2]
 812 0014 0121     		movs	r1, #1
 813 0016 0B43     		orrs	r3, r1
 814 0018 1360     		str	r3, [r2]
 815              	.L33:
  51:Src/main.c    ****     }
  52:Src/main.c    **** 
  53:Src/main.c    ****     if(debouncer == 0x7FFFFFFF) {
 816              		.loc 1 53 5 is_stmt 1 view .LVU233
 817              		.loc 1 53 18 is_stmt 0 view .LVU234
 818 001a 0F4B     		ldr	r3, .L42
 819 001c 1A68     		ldr	r2, [r3]
 820              		.loc 1 53 7 view .LVU235
 821 001e 0F4B     		ldr	r3, .L42+4
 822 0020 9A42     		cmp	r2, r3
 823 0022 00D0     		beq	.L41
 824              	.L32:
  54:Src/main.c    ****     switch(target_rpm) {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 33


  55:Src/main.c    ****         case 80:
  56:Src/main.c    ****             target_rpm = 50;
  57:Src/main.c    ****             break;
  58:Src/main.c    ****         case 50:
  59:Src/main.c    ****             target_rpm = 81;
  60:Src/main.c    ****             break;
  61:Src/main.c    ****         case 0:
  62:Src/main.c    ****             target_rpm = 80;
  63:Src/main.c    ****             break;
  64:Src/main.c    ****         default:
  65:Src/main.c    ****             target_rpm = 0;
  66:Src/main.c    ****             break;
  67:Src/main.c    ****         }
  68:Src/main.c    ****     }
  69:Src/main.c    **** }
 825              		.loc 1 69 1 view .LVU236
 826              		@ sp needed
 827 0024 7047     		bx	lr
 828              	.L41:
  54:Src/main.c    ****     switch(target_rpm) {
 829              		.loc 1 54 5 is_stmt 1 view .LVU237
 830 0026 0E4B     		ldr	r3, .L42+8
 831 0028 1B88     		ldrh	r3, [r3]
 832 002a 1BB2     		sxth	r3, r3
 833 002c 322B     		cmp	r3, #50
 834 002e 0BD0     		beq	.L35
 835 0030 502B     		cmp	r3, #80
 836 0032 05D0     		beq	.L36
 837 0034 002B     		cmp	r3, #0
 838 0036 0BD0     		beq	.L37
  65:Src/main.c    ****             break;
 839              		.loc 1 65 13 view .LVU238
  65:Src/main.c    ****             break;
 840              		.loc 1 65 24 is_stmt 0 view .LVU239
 841 0038 094B     		ldr	r3, .L42+8
 842 003a 0022     		movs	r2, #0
 843 003c 1A80     		strh	r2, [r3]
  66:Src/main.c    ****         }
 844              		.loc 1 66 13 is_stmt 1 view .LVU240
 845              		.loc 1 69 1 is_stmt 0 view .LVU241
 846 003e F1E7     		b	.L32
 847              	.L36:
  56:Src/main.c    ****             break;
 848              		.loc 1 56 13 is_stmt 1 view .LVU242
  56:Src/main.c    ****             break;
 849              		.loc 1 56 24 is_stmt 0 view .LVU243
 850 0040 074B     		ldr	r3, .L42+8
 851 0042 3222     		movs	r2, #50
 852 0044 1A80     		strh	r2, [r3]
  57:Src/main.c    ****         case 50:
 853              		.loc 1 57 13 is_stmt 1 view .LVU244
 854 0046 EDE7     		b	.L32
 855              	.L35:
  59:Src/main.c    ****             break;
 856              		.loc 1 59 13 view .LVU245
  59:Src/main.c    ****             break;
 857              		.loc 1 59 24 is_stmt 0 view .LVU246
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 34


 858 0048 054B     		ldr	r3, .L42+8
 859 004a 5122     		movs	r2, #81
 860 004c 1A80     		strh	r2, [r3]
  60:Src/main.c    ****         case 0:
 861              		.loc 1 60 13 is_stmt 1 view .LVU247
 862 004e E9E7     		b	.L32
 863              	.L37:
  62:Src/main.c    ****             break;
 864              		.loc 1 62 13 view .LVU248
  62:Src/main.c    ****             break;
 865              		.loc 1 62 24 is_stmt 0 view .LVU249
 866 0050 034B     		ldr	r3, .L42+8
 867 0052 5022     		movs	r2, #80
 868 0054 1A80     		strh	r2, [r3]
  63:Src/main.c    ****         default:
 869              		.loc 1 63 13 is_stmt 1 view .LVU250
 870 0056 E5E7     		b	.L32
 871              	.L43:
 872              		.align	2
 873              	.L42:
 874 0058 00000000 		.word	debouncer
 875 005c FFFFFF7F 		.word	2147483647
 876 0060 00000000 		.word	target_rpm
 877              		.cfi_endproc
 878              	.LFE52:
 880              		.section	.text.main,"ax",%progbits
 881              		.align	1
 882              		.global	main
 883              		.syntax unified
 884              		.code	16
 885              		.thumb_func
 887              	main:
 888              	.LVL12:
 889              	.LFB53:
  70:Src/main.c    **** 
  71:Src/main.c    **** /* ------------------------------------------------------------------------------------------------
  72:Src/main.c    ****  * Main Program Code
  73:Src/main.c    ****  *
  74:Src/main.c    ****  * Starts initialization of peripherals
  75:Src/main.c    ****  * Blinks green LED (PC9) in loop as heartbeat
  76:Src/main.c    ****  * ------------------------------------------------------------------------------------------------
  77:Src/main.c    ****  */
  78:Src/main.c    **** volatile uint32_t encoder_count = 0;
  79:Src/main.c    **** 
  80:Src/main.c    **** int main(int argc, char* argv[]) {
 890              		.loc 1 80 34 view -0
 891              		.cfi_startproc
 892              		@ Volatile: function does not return.
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		.loc 1 80 34 is_stmt 0 view .LVU252
 896 0000 10B5     		push	{r4, lr}
 897              	.LCFI4:
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 4, -8
 900              		.cfi_offset 14, -4
  81:Src/main.c    **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 35


  82:Src/main.c    ****     debouncer = 0;                          // Initialize global variables
 901              		.loc 1 82 5 is_stmt 1 view .LVU253
 902              		.loc 1 82 15 is_stmt 0 view .LVU254
 903 0002 0D4B     		ldr	r3, .L46
 904 0004 0022     		movs	r2, #0
 905 0006 1A60     		str	r2, [r3]
  83:Src/main.c    **** 		HAL_Init();															// Initialize HAL
 906              		.loc 1 83 3 is_stmt 1 view .LVU255
 907 0008 FFF7FEFF 		bl	HAL_Init
 908              	.LVL13:
  84:Src/main.c    ****     LED_init();                             // Initialize LED's
 909              		.loc 1 84 5 view .LVU256
 910 000c FFF7FEFF 		bl	LED_init
 911              	.LVL14:
  85:Src/main.c    ****     button_init();                          // Initialize button
 912              		.loc 1 85 5 view .LVU257
 913 0010 FFF7FEFF 		bl	button_init
 914              	.LVL15:
  86:Src/main.c    **** 
  87:Src/main.c    ****     motor_init();                           // Initialize motor code
 915              		.loc 1 87 5 view .LVU258
 916 0014 FFF7FEFF 		bl	motor_init
 917              	.LVL16:
 918              	.L45:
  88:Src/main.c    **** 
  89:Src/main.c    ****     while (1) {
 919              		.loc 1 89 5 view .LVU259
  90:Src/main.c    ****         GPIOC->ODR ^= GPIO_ODR_9;           // Toggle green LED (heartbeat)
 920              		.loc 1 90 9 view .LVU260
 921              		.loc 1 90 14 is_stmt 0 view .LVU261
 922 0018 084A     		ldr	r2, .L46+4
 923 001a 5169     		ldr	r1, [r2, #20]
 924              		.loc 1 90 20 view .LVU262
 925 001c 8023     		movs	r3, #128
 926 001e 9B00     		lsls	r3, r3, #2
 927 0020 4B40     		eors	r3, r1
 928 0022 5361     		str	r3, [r2, #20]
  91:Src/main.c    ****         encoder_count = TIM2->CNT;
 929              		.loc 1 91 9 is_stmt 1 view .LVU263
 930              		.loc 1 91 29 is_stmt 0 view .LVU264
 931 0024 8023     		movs	r3, #128
 932 0026 DB05     		lsls	r3, r3, #23
 933 0028 5A6A     		ldr	r2, [r3, #36]
 934              		.loc 1 91 23 view .LVU265
 935 002a 054B     		ldr	r3, .L46+8
 936 002c 1A60     		str	r2, [r3]
  92:Src/main.c    ****         HAL_Delay(128);                      // Delay 1/8 second
 937              		.loc 1 92 9 is_stmt 1 discriminator 1 view .LVU266
 938 002e 8020     		movs	r0, #128
 939 0030 FFF7FEFF 		bl	HAL_Delay
 940              	.LVL17:
  89:Src/main.c    ****         GPIOC->ODR ^= GPIO_ODR_9;           // Toggle green LED (heartbeat)
 941              		.loc 1 89 11 view .LVU267
 942 0034 F0E7     		b	.L45
 943              	.L47:
 944 0036 C046     		.align	2
 945              	.L46:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 36


 946 0038 00000000 		.word	debouncer
 947 003c 00080048 		.word	1207961600
 948 0040 00000000 		.word	encoder_count
 949              		.cfi_endproc
 950              	.LFE53:
 952              		.global	encoder_count
 953              		.section	.bss.encoder_count,"aw",%nobits
 954              		.align	2
 957              	encoder_count:
 958 0000 00000000 		.space	4
 959              		.global	debouncer
 960              		.section	.bss.debouncer,"aw",%nobits
 961              		.align	2
 964              	debouncer:
 965 0000 00000000 		.space	4
 966              		.global	Ki
 967              		.section	.data.Ki,"aw"
 970              	Ki:
 971 0000 01       		.byte	1
 972              		.global	Kp
 973              		.section	.data.Kp,"aw"
 976              	Kp:
 977 0000 01       		.byte	1
 978              		.global	error
 979              		.section	.bss.error,"aw",%nobits
 980              		.align	1
 983              	error:
 984 0000 0000     		.space	2
 985              		.global	adc_value
 986              		.section	.bss.adc_value,"aw",%nobits
 989              	adc_value:
 990 0000 00       		.space	1
 991              		.global	motor_speed
 992              		.section	.bss.motor_speed,"aw",%nobits
 993              		.align	1
 996              	motor_speed:
 997 0000 0000     		.space	2
 998              		.global	target_rpm
 999              		.section	.bss.target_rpm,"aw",%nobits
 1000              		.align	1
 1003              	target_rpm:
 1004 0000 0000     		.space	2
 1005              		.global	duty_cycle
 1006              		.section	.bss.duty_cycle,"aw",%nobits
 1009              	duty_cycle:
 1010 0000 00       		.space	1
 1011              		.global	error_integral
 1012              		.section	.bss.error_integral,"aw",%nobits
 1013              		.align	1
 1016              	error_integral:
 1017 0000 0000     		.space	2
 1018              		.text
 1019              	.Letext0:
 1020              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1021              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1022              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1023              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 37


 1024              		.file 8 "Inc/motor.h"
 1025              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:19     .text.pwm_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:25     .text.pwm_init:00000000 pwm_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:151    .text.pwm_init:00000084 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:161    .text.pwm_setDutyCycle:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:167    .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:204    .text.pwm_setDutyCycle:00000018 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:209    .text.encoder_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:215    .text.encoder_init:00000000 encoder_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:382    .text.encoder_init:0000009c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:396    .text.ADC_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:402    .text.ADC_init:00000000 ADC_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:498    .text.ADC_init:00000064 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:504    .text.motor_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:510    .text.motor_init:00000000 motor_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:537    .text.PI_update:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:543    .text.PI_update:00000000 PI_update
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:587    .text.PI_update:00000024 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1009   .bss.duty_cycle:00000000 duty_cycle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:989    .bss.adc_value:00000000 adc_value
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:594    .text.TIM6_DAC_IRQHandler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:600    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:644    .text.TIM6_DAC_IRQHandler:00000028 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:996    .bss.motor_speed:00000000 motor_speed
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:653    .text.LED_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:659    .text.LED_init:00000000 LED_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:716    .text.LED_init:00000038 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:724    .text.button_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:730    .text.button_init:00000000 button_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:775    .text.button_init:0000002c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:781    .text.HAL_SYSTICK_Callback:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:787    .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:874    .text.HAL_SYSTICK_Callback:00000058 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:964    .bss.debouncer:00000000 debouncer
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1003   .bss.target_rpm:00000000 target_rpm
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:881    .text.main:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:887    .text.main:00000000 main
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:946    .text.main:00000038 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:957    .bss.encoder_count:00000000 encoder_count
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:954    .bss.encoder_count:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:961    .bss.debouncer:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:970    .data.Ki:00000000 Ki
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:976    .data.Kp:00000000 Kp
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:983    .bss.error:00000000 error
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:980    .bss.error:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:990    .bss.adc_value:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:993    .bss.motor_speed:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1000   .bss.target_rpm:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1010   .bss.duty_cycle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1016   .bss.error_integral:00000000 error_integral
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s:1013   .bss.error_integral:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_Init
HAL_Delay
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccfHmGPg.s 			page 39


