ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.transmitCharacter,"ax",%progbits
  19              		.align	1
  20              		.global	transmitCharacter
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	transmitCharacter:
  26              	.LFB42:
   1:Src/main.c    **** /**
   2:Src/main.c    ****  *
   3:Src/main.c    ****  * Brandon Mouser
   4:Src/main.c    ****  * U0962682
   5:Src/main.c    ****  *
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * File Name          : main.c
   8:Src/main.c    ****  * Description        : Main program body
   9:Src/main.c    ****  ******************************************************************************
  10:Src/main.c    ****  ** This notice applies to any and all portions of this file
  11:Src/main.c    ****  * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    ****  * USER CODE END. Other portions of this file, whether
  13:Src/main.c    ****  * inserted by the user or by software development tools
  14:Src/main.c    ****  * are owned by their respective copyright owners.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****  *
  18:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****  * are permitted provided that the following conditions are met:
  20:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****  *      and/or other materials provided with the distribution.
  25:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****  *      without specific prior written permission.
  28:Src/main.c    ****  *
  29:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  32:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 2


  33:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****  *
  40:Src/main.c    ****  ******************************************************************************
  41:Src/main.c    ****  */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** #include "stm32f072xb.h"
  47:Src/main.c    **** void _Error_Handler(char *file, int line);
  48:Src/main.c    **** char receivedChar; // global variable holding the received characters
  49:Src/main.c    **** volatile int newData = 0;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE BEGIN Includes */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PV */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  63:Src/main.c    **** void SystemClock_Config(void);
  64:Src/main.c    **** void transmitCharacter(char);
  65:Src/main.c    **** void transmitString(char *);
  66:Src/main.c    **** void USART3_IRQHandler(void);
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** /**
  78:Src/main.c    ****  * @brief  The application entry point.
  79:Src/main.c    ****  * @retval int
  80:Src/main.c    ****  */
  81:Src/main.c    **** int main(void)
  82:Src/main.c    **** {
  83:Src/main.c    ****   HAL_Init();           // Reset of all peripherals, init the Flash and Systick
  84:Src/main.c    ****   SystemClock_Config(); // Configure the system clock
  85:Src/main.c    **** 
  86:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
  87:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
  88:Src/main.c    ****   GPIO_InitTypeDef initStr = {GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO
  89:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 3


  90:Src/main.c    ****                               GPIO_SPEED_FREQ_LOW,
  91:Src/main.c    ****                               GPIO_NOPULL};
  92:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC6,7,8 & PC9
  93:Src/main.c    ****                                   // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start P
  94:Src/main.c    **** 
  95:Src/main.c    ****   // **** Alternate Function **** //
  96:Src/main.c    ****   // Set the selected pins into alternate function mode and program the correct alternate function 
  97:Src/main.c    ****   // PC4 = USART3_TX (AF1) -- transmitting
  98:Src/main.c    ****   // PC5 = USART3_RX (AF1) -- receiving
  99:Src/main.c    ****   // Clear PC4/5 MODER4/5 and then set to alternate (10)
 100:Src/main.c    ****   GPIOC->MODER &= ~(1 << 8);  // clear PC4 bit
 101:Src/main.c    ****   GPIOC->MODER &= ~(1 << 9);  // clear PC4 bit
 102:Src/main.c    ****   GPIOC->MODER |= (1 << 9);   // set to alternate (10)
 103:Src/main.c    ****   GPIOC->MODER &= ~(1 << 10); // clear PC5 bit
 104:Src/main.c    ****   GPIOC->MODER &= ~(1 << 11); // clear PC5 bit
 105:Src/main.c    ****   GPIOC->MODER |= (1 << 11);  // set to alternate (10)
 106:Src/main.c    ****   // Assign AF1 to PC4 and PC5 -- 0001
 107:Src/main.c    ****   GPIOC->AFR[0] |= (1 << 16);  // AFSEL4 bit 16
 108:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 17); // AFSEL4 bit 17 (clear)
 109:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 18); // AFSEL4 bit 18 (clear)
 110:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 19); // AFSEL4 bit 19 (clear)
 111:Src/main.c    ****   GPIOC->AFR[0] |= (1 << 20);  // AFSEL5 bit 20
 112:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 21); // AFSEL5 bit 21 (clear)
 113:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 22); // AFSEL5 bit 22 (clear)
 114:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 23); // AFSEL5 bit 23 (clear)
 115:Src/main.c    **** 
 116:Src/main.c    ****   // **** Initialize the USART **** //
 117:Src/main.c    ****   // Enable the USART clock in the RCC
 118:Src/main.c    ****   RCC->APB1ENR = RCC_APB1ENR_USART3EN;
 119:Src/main.c    ****   // Set the Baud rate for communication to be 115200 bits/second.
 120:Src/main.c    ****   USART3->BRR = HAL_RCC_GetHCLKFreq() / 9600;
 121:Src/main.c    ****   // Enable transmitter and receiver hardware
 122:Src/main.c    ****   USART3->CR1 |= (1 << 3); // Enable transmitter
 123:Src/main.c    ****   USART3->CR1 |= (1 << 2); // Enable receiver
 124:Src/main.c    ****   USART3->CR1 |= (1 << 5); // Enable RXNE interrupt
 125:Src/main.c    ****   USART3->CR1 |= (1 << 0); // Enable USART
 126:Src/main.c    ****   // **** Initialize the USART **** //
 127:Src/main.c    ****   //*****Enable and Set Priority of the USART3 Interrupt*****************//
 128:Src/main.c    ****   // Enable the selected EXTI interrupt that references USART3
 129:Src/main.c    ****   NVIC_EnableIRQ(USART3_4_IRQn);
 130:Src/main.c    ****   // Set the priority for the interrupt to 0
 131:Src/main.c    ****   NVIC_SetPriority(USART3_4_IRQn, 0);
 132:Src/main.c    ****   transmitString("CMD? \0");
 133:Src/main.c    ****   while (1)
 134:Src/main.c    ****   {
 135:Src/main.c    ****   }
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** /**
 139:Src/main.c    ****  * USART3 Interrupt Handler
 140:Src/main.c    ****  */
 141:Src/main.c    **** void USART3_IRQHandler()
 142:Src/main.c    **** {
 143:Src/main.c    ****   while (!(USART3->ISR & USART_ISR_RXNE))
 144:Src/main.c    ****   {
 145:Src/main.c    ****     receivedChar = (char)(USART3->RDR & 0xFF); // set global variable and mask it to only 2 charact
 146:Src/main.c    ****     newData = 1;                               // Indicate new data is ready to be processed
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 4


 147:Src/main.c    ****     uint16_t LED_case = 0;                     // LED to update
 148:Src/main.c    ****     if ((newData))
 149:Src/main.c    ****     { // Check if a complete command is received
 150:Src/main.c    ****       switch (receivedChar)
 151:Src/main.c    ****       {
 152:Src/main.c    ****       case 'r':
 153:Src/main.c    ****         transmitString("Red LED");
 154:Src/main.c    ****         LED_case = GPIO_PIN_6;
 155:Src/main.c    ****         break;
 156:Src/main.c    ****       case 'b':
 157:Src/main.c    ****         transmitString("Blue LED");
 158:Src/main.c    ****         LED_case = GPIO_PIN_7;
 159:Src/main.c    ****         break;
 160:Src/main.c    ****       case 'o':
 161:Src/main.c    ****         transmitString("Orange LED");
 162:Src/main.c    ****         LED_case = GPIO_PIN_8;
 163:Src/main.c    ****         break;
 164:Src/main.c    ****       case 'g':
 165:Src/main.c    ****         LED_case = GPIO_PIN_9;
 166:Src/main.c    ****         break;
 167:Src/main.c    ****       case '0':
 168:Src/main.c    ****         HAL_GPIO_WritePin(GPIOC, LED_case, GPIO_PIN_RESET);
 169:Src/main.c    ****         transmitString("Green LED");
 170:Src/main.c    ****         break;
 171:Src/main.c    ****       case '1':
 172:Src/main.c    ****         HAL_GPIO_WritePin(GPIOC, LED_case, GPIO_PIN_SET);
 173:Src/main.c    ****         break;
 174:Src/main.c    ****       case '2':
 175:Src/main.c    ****         HAL_GPIO_TogglePin(GPIOC, LED_case);
 176:Src/main.c    ****       default:
 177:Src/main.c    ****         transmitString("Error: Input needs to be 2 characters with correct criteria of r,b,o,g and 
 178:Src/main.c    ****         break;
 179:Src/main.c    ****       }
 180:Src/main.c    ****       newData = 0;
 181:Src/main.c    ****     }
 182:Src/main.c    ****   }
 183:Src/main.c    **** }
 184:Src/main.c    **** 
 185:Src/main.c    **** /**
 186:Src/main.c    ****  *  Transmits a single character on the USART
 187:Src/main.c    ****  */
 188:Src/main.c    **** void transmitCharacter(char c)
 189:Src/main.c    **** {
  27              		.loc 1 189 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
 190:Src/main.c    ****   // Check and wait on the USART status flag that indicates the transmit register is empty
 191:Src/main.c    ****   while (!(USART3->ISR & USART_ISR_TXE))
 192:Src/main.c    ****   {
 193:Src/main.c    ****   }
  34              		.loc 1 193 3 view .LVU1
 191:Src/main.c    ****   {
  35              		.loc 1 191 10 discriminator 1 view .LVU2
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 5


 191:Src/main.c    ****   {
  36              		.loc 1 191 18 is_stmt 0 discriminator 1 view .LVU3
  37 0000 034B     		ldr	r3, .L4
  38 0002 DB69     		ldr	r3, [r3, #28]
 191:Src/main.c    ****   {
  39              		.loc 1 191 10 discriminator 1 view .LVU4
  40 0004 1B06     		lsls	r3, r3, #24
  41 0006 FBD5     		bpl	.L2
 194:Src/main.c    ****   // Write the character into the transmit data register
 195:Src/main.c    ****   USART3->TDR = c;
  42              		.loc 1 195 3 is_stmt 1 view .LVU5
  43              		.loc 1 195 15 is_stmt 0 view .LVU6
  44 0008 014B     		ldr	r3, .L4
  45 000a 1885     		strh	r0, [r3, #40]
 196:Src/main.c    **** }
  46              		.loc 1 196 1 view .LVU7
  47              		@ sp needed
  48 000c 7047     		bx	lr
  49              	.L5:
  50 000e C046     		.align	2
  51              	.L4:
  52 0010 00480040 		.word	1073760256
  53              		.cfi_endproc
  54              	.LFE42:
  56              		.section	.text.transmitString,"ax",%progbits
  57              		.align	1
  58              		.global	transmitString
  59              		.syntax unified
  60              		.code	16
  61              		.thumb_func
  63              	transmitString:
  64              	.LVL1:
  65              	.LFB43:
 197:Src/main.c    **** 
 198:Src/main.c    **** /**
 199:Src/main.c    ****  *  Transmits a string on the USART
 200:Src/main.c    ****  */
 201:Src/main.c    **** void transmitString(char *s)
 202:Src/main.c    **** {
  66              		.loc 1 202 1 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		.loc 1 202 1 is_stmt 0 view .LVU9
  71 0000 70B5     		push	{r4, r5, r6, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 16
  74              		.cfi_offset 4, -16
  75              		.cfi_offset 5, -12
  76              		.cfi_offset 6, -8
  77              		.cfi_offset 14, -4
  78 0002 0500     		movs	r5, r0
 203:Src/main.c    ****   for (int i = 0; s[i] != '\0'; i++)
  79              		.loc 1 203 3 is_stmt 1 view .LVU10
  80              	.LBB7:
  81              		.loc 1 203 8 view .LVU11
  82              	.LVL2:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 6


  83              		.loc 1 203 12 is_stmt 0 view .LVU12
  84 0004 0024     		movs	r4, #0
  85              		.loc 1 203 3 view .LVU13
  86 0006 02E0     		b	.L7
  87              	.LVL3:
  88              	.L8:
 204:Src/main.c    ****   {
 205:Src/main.c    ****     transmitCharacter(s[i]);
  89              		.loc 1 205 5 is_stmt 1 view .LVU14
  90 0008 FFF7FEFF 		bl	transmitCharacter
  91              	.LVL4:
 203:Src/main.c    ****   for (int i = 0; s[i] != '\0'; i++)
  92              		.loc 1 203 34 discriminator 3 view .LVU15
  93 000c 0134     		adds	r4, r4, #1
  94              	.LVL5:
  95              	.L7:
 203:Src/main.c    ****   for (int i = 0; s[i] != '\0'; i++)
  96              		.loc 1 203 24 discriminator 1 view .LVU16
 203:Src/main.c    ****   for (int i = 0; s[i] != '\0'; i++)
  97              		.loc 1 203 20 is_stmt 0 discriminator 1 view .LVU17
  98 000e 285D     		ldrb	r0, [r5, r4]
 203:Src/main.c    ****   for (int i = 0; s[i] != '\0'; i++)
  99              		.loc 1 203 24 discriminator 1 view .LVU18
 100 0010 0028     		cmp	r0, #0
 101 0012 F9D1     		bne	.L8
 102              	.LBE7:
 206:Src/main.c    ****   }
 207:Src/main.c    **** }
 103              		.loc 1 207 1 view .LVU19
 104              		@ sp needed
 105              	.LVL6:
 106              	.LVL7:
 107              		.loc 1 207 1 view .LVU20
 108 0014 70BD     		pop	{r4, r5, r6, pc}
 109              		.cfi_endproc
 110              	.LFE43:
 112              		.section	.rodata.USART3_IRQHandler.str1.4,"aMS",%progbits,1
 113              		.align	2
 114              	.LC2:
 115 0000 52656420 		.ascii	"Red LED\000"
 115      4C454400 
 116              		.align	2
 117              	.LC4:
 118 0008 426C7565 		.ascii	"Blue LED\000"
 118      204C4544 
 118      00
 119 0011 000000   		.align	2
 120              	.LC6:
 121 0014 4F72616E 		.ascii	"Orange LED\000"
 121      6765204C 
 121      454400
 122 001f 00       		.align	2
 123              	.LC8:
 124 0020 47726565 		.ascii	"Green LED\000"
 124      6E204C45 
 124      4400
 125              		.section	.text.USART3_IRQHandler,"ax",%progbits
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 7


 126              		.align	1
 127              		.global	USART3_IRQHandler
 128              		.syntax unified
 129              		.code	16
 130              		.thumb_func
 132              	USART3_IRQHandler:
 133              	.LFB41:
 142:Src/main.c    ****   while (!(USART3->ISR & USART_ISR_RXNE))
 134              		.loc 1 142 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138 0000 10B5     		push	{r4, lr}
 139              	.LCFI1:
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 4, -8
 142              		.cfi_offset 14, -4
 143:Src/main.c    ****   {
 143              		.loc 1 143 3 view .LVU22
 144              	.L11:
 143:Src/main.c    ****   {
 145              		.loc 1 143 10 view .LVU23
 143:Src/main.c    ****   {
 146              		.loc 1 143 18 is_stmt 0 view .LVU24
 147 0002 234B     		ldr	r3, .L23
 148 0004 DB69     		ldr	r3, [r3, #28]
 143:Src/main.c    ****   {
 149              		.loc 1 143 10 view .LVU25
 150 0006 9B06     		lsls	r3, r3, #26
 151 0008 40D4     		bmi	.L22
 152              	.LBB8:
 145:Src/main.c    ****     newData = 1;                               // Indicate new data is ready to be processed
 153              		.loc 1 145 5 is_stmt 1 view .LVU26
 145:Src/main.c    ****     newData = 1;                               // Indicate new data is ready to be processed
 154              		.loc 1 145 33 is_stmt 0 view .LVU27
 155 000a 214B     		ldr	r3, .L23
 156 000c 9A8C     		ldrh	r2, [r3, #36]
 145:Src/main.c    ****     newData = 1;                               // Indicate new data is ready to be processed
 157              		.loc 1 145 20 view .LVU28
 158 000e D2B2     		uxtb	r2, r2
 145:Src/main.c    ****     newData = 1;                               // Indicate new data is ready to be processed
 159              		.loc 1 145 18 view .LVU29
 160 0010 204B     		ldr	r3, .L23+4
 161 0012 1A70     		strb	r2, [r3]
 146:Src/main.c    ****     uint16_t LED_case = 0;                     // LED to update
 162              		.loc 1 146 5 is_stmt 1 view .LVU30
 146:Src/main.c    ****     uint16_t LED_case = 0;                     // LED to update
 163              		.loc 1 146 13 is_stmt 0 view .LVU31
 164 0014 204B     		ldr	r3, .L23+8
 165 0016 0121     		movs	r1, #1
 166 0018 1960     		str	r1, [r3]
 147:Src/main.c    ****     if ((newData))
 167              		.loc 1 147 5 is_stmt 1 view .LVU32
 168              	.LVL8:
 148:Src/main.c    ****     { // Check if a complete command is received
 169              		.loc 1 148 5 view .LVU33
 148:Src/main.c    ****     { // Check if a complete command is received
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 8


 170              		.loc 1 148 9 is_stmt 0 view .LVU34
 171 001a 1B68     		ldr	r3, [r3]
 148:Src/main.c    ****     { // Check if a complete command is received
 172              		.loc 1 148 8 view .LVU35
 173 001c 002B     		cmp	r3, #0
 174 001e F0D0     		beq	.L11
 150:Src/main.c    ****       {
 175              		.loc 1 150 7 is_stmt 1 view .LVU36
 176 0020 622A     		cmp	r2, #98
 177 0022 1AD0     		beq	.L12
 178 0024 0ED8     		bhi	.L13
 179 0026 312A     		cmp	r2, #49
 180 0028 1FD0     		beq	.L14
 181 002a 322A     		cmp	r2, #50
 182 002c 23D0     		beq	.L15
 183 002e 302A     		cmp	r2, #48
 184 0030 25D1     		bne	.L17
 168:Src/main.c    ****         transmitString("Green LED");
 185              		.loc 1 168 9 view .LVU37
 186 0032 0022     		movs	r2, #0
 187 0034 0021     		movs	r1, #0
 188 0036 1948     		ldr	r0, .L23+12
 189 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 190              	.LVL9:
 169:Src/main.c    ****         break;
 191              		.loc 1 169 9 view .LVU38
 192 003c 1848     		ldr	r0, .L23+16
 193 003e FFF7FEFF 		bl	transmitString
 194              	.LVL10:
 170:Src/main.c    ****       case '1':
 195              		.loc 1 170 9 view .LVU39
 196 0042 1FE0     		b	.L20
 197              	.L13:
 150:Src/main.c    ****       {
 198              		.loc 1 150 7 is_stmt 0 view .LVU40
 199 0044 6F2A     		cmp	r2, #111
 200 0046 0CD0     		beq	.L18
 201 0048 722A     		cmp	r2, #114
 202 004a 02D0     		beq	.L19
 203 004c 672A     		cmp	r2, #103
 204 004e 19D0     		beq	.L20
 205 0050 15E0     		b	.L17
 206              	.L19:
 153:Src/main.c    ****         LED_case = GPIO_PIN_6;
 207              		.loc 1 153 9 is_stmt 1 view .LVU41
 208 0052 1448     		ldr	r0, .L23+20
 209 0054 FFF7FEFF 		bl	transmitString
 210              	.LVL11:
 154:Src/main.c    ****         break;
 211              		.loc 1 154 9 view .LVU42
 155:Src/main.c    ****       case 'b':
 212              		.loc 1 155 9 view .LVU43
 213 0058 14E0     		b	.L20
 214              	.LVL12:
 215              	.L12:
 157:Src/main.c    ****         LED_case = GPIO_PIN_7;
 216              		.loc 1 157 9 view .LVU44
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 9


 217 005a 1348     		ldr	r0, .L23+24
 218 005c FFF7FEFF 		bl	transmitString
 219              	.LVL13:
 158:Src/main.c    ****         break;
 220              		.loc 1 158 9 view .LVU45
 159:Src/main.c    ****       case 'o':
 221              		.loc 1 159 9 view .LVU46
 222 0060 10E0     		b	.L20
 223              	.LVL14:
 224              	.L18:
 161:Src/main.c    ****         LED_case = GPIO_PIN_8;
 225              		.loc 1 161 9 view .LVU47
 226 0062 1248     		ldr	r0, .L23+28
 227 0064 FFF7FEFF 		bl	transmitString
 228              	.LVL15:
 162:Src/main.c    ****         break;
 229              		.loc 1 162 9 view .LVU48
 163:Src/main.c    ****       case 'g':
 230              		.loc 1 163 9 view .LVU49
 231 0068 0CE0     		b	.L20
 232              	.LVL16:
 233              	.L14:
 172:Src/main.c    ****         break;
 234              		.loc 1 172 9 view .LVU50
 235 006a 0122     		movs	r2, #1
 236 006c 0021     		movs	r1, #0
 237 006e 0B48     		ldr	r0, .L23+12
 238 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 239              	.LVL17:
 173:Src/main.c    ****       case '2':
 240              		.loc 1 173 9 view .LVU51
 241 0074 06E0     		b	.L20
 242              	.L15:
 175:Src/main.c    ****       default:
 243              		.loc 1 175 9 view .LVU52
 244 0076 0021     		movs	r1, #0
 245 0078 0848     		ldr	r0, .L23+12
 246 007a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 247              	.LVL18:
 248              	.L17:
 177:Src/main.c    ****         break;
 249              		.loc 1 177 9 view .LVU53
 250 007e 0C48     		ldr	r0, .L23+32
 251 0080 FFF7FEFF 		bl	transmitString
 252              	.LVL19:
 178:Src/main.c    ****       }
 253              		.loc 1 178 9 view .LVU54
 254              	.L20:
 180:Src/main.c    ****     }
 255              		.loc 1 180 7 view .LVU55
 180:Src/main.c    ****     }
 256              		.loc 1 180 15 is_stmt 0 view .LVU56
 257 0084 044B     		ldr	r3, .L23+8
 258 0086 0022     		movs	r2, #0
 259 0088 1A60     		str	r2, [r3]
 260 008a BAE7     		b	.L11
 261              	.L22:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 10


 262              	.LBE8:
 183:Src/main.c    **** 
 263              		.loc 1 183 1 view .LVU57
 264              		@ sp needed
 265 008c 10BD     		pop	{r4, pc}
 266              	.L24:
 267 008e C046     		.align	2
 268              	.L23:
 269 0090 00480040 		.word	1073760256
 270 0094 00000000 		.word	receivedChar
 271 0098 00000000 		.word	newData
 272 009c 00080048 		.word	1207961600
 273 00a0 20000000 		.word	.LC8
 274 00a4 00000000 		.word	.LC2
 275 00a8 08000000 		.word	.LC4
 276 00ac 14000000 		.word	.LC6
 277 00b0 00000000 		.word	.LANCHOR0
 278              		.cfi_endproc
 279              	.LFE41:
 281              		.section	.text._Error_Handler,"ax",%progbits
 282              		.align	1
 283              		.global	_Error_Handler
 284              		.syntax unified
 285              		.code	16
 286              		.thumb_func
 288              	_Error_Handler:
 289              	.LFB45:
 208:Src/main.c    **** 
 209:Src/main.c    **** /** System Clock Configuration
 210:Src/main.c    ****  */
 211:Src/main.c    **** void SystemClock_Config(void)
 212:Src/main.c    **** {
 213:Src/main.c    **** 
 214:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 215:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 216:Src/main.c    **** 
 217:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 218:Src/main.c    ****    */
 219:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 220:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 221:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 223:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 224:Src/main.c    ****   {
 225:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 226:Src/main.c    ****   }
 227:Src/main.c    **** 
 228:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 229:Src/main.c    ****    */
 230:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 231:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 232:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 233:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 234:Src/main.c    **** 
 235:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 236:Src/main.c    ****   {
 237:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 11


 238:Src/main.c    ****   }
 239:Src/main.c    **** 
 240:Src/main.c    ****   /**Configure the Systick interrupt time
 241:Src/main.c    ****    */
 242:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 243:Src/main.c    **** 
 244:Src/main.c    ****   /**Configure the Systick
 245:Src/main.c    ****    */
 246:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 247:Src/main.c    **** 
 248:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 249:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 250:Src/main.c    **** }
 251:Src/main.c    **** 
 252:Src/main.c    **** /* USER CODE BEGIN 4 */
 253:Src/main.c    **** 
 254:Src/main.c    **** /* USER CODE END 4 */
 255:Src/main.c    **** 
 256:Src/main.c    **** /**
 257:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 258:Src/main.c    ****  * @param  None
 259:Src/main.c    ****  * @retval None
 260:Src/main.c    ****  */
 261:Src/main.c    **** void _Error_Handler(char *file, int line)
 262:Src/main.c    **** {
 290              		.loc 1 262 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ Volatile: function does not return.
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296              	.LVL20:
 297              	.L26:
 263:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 264:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 265:Src/main.c    ****   while (1)
 298              		.loc 1 265 3 view .LVU59
 266:Src/main.c    ****   {
 267:Src/main.c    ****   }
 299              		.loc 1 267 3 view .LVU60
 265:Src/main.c    ****   {
 300              		.loc 1 265 9 view .LVU61
 301 0000 FEE7     		b	.L26
 302              		.cfi_endproc
 303              	.LFE45:
 305              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 306              		.align	2
 307              	.LC12:
 308 0000 5372632F 		.ascii	"Src/main.c\000"
 308      6D61696E 
 308      2E6300
 309              		.global	__aeabi_uidiv
 310              		.section	.text.SystemClock_Config,"ax",%progbits
 311              		.align	1
 312              		.global	SystemClock_Config
 313              		.syntax unified
 314              		.code	16
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 12


 315              		.thumb_func
 317              	SystemClock_Config:
 318              	.LFB44:
 212:Src/main.c    **** 
 319              		.loc 1 212 1 view -0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 72
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323 0000 00B5     		push	{lr}
 324              	.LCFI2:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 14, -4
 327 0002 93B0     		sub	sp, sp, #76
 328              	.LCFI3:
 329              		.cfi_def_cfa_offset 80
 214:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 330              		.loc 1 214 3 view .LVU63
 215:Src/main.c    **** 
 331              		.loc 1 215 3 view .LVU64
 219:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 332              		.loc 1 219 3 view .LVU65
 219:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 333              		.loc 1 219 36 is_stmt 0 view .LVU66
 334 0004 0223     		movs	r3, #2
 335 0006 0593     		str	r3, [sp, #20]
 220:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 336              		.loc 1 220 3 is_stmt 1 view .LVU67
 220:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 337              		.loc 1 220 30 is_stmt 0 view .LVU68
 338 0008 013B     		subs	r3, r3, #1
 339 000a 0893     		str	r3, [sp, #32]
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 340              		.loc 1 221 3 is_stmt 1 view .LVU69
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 341              		.loc 1 221 41 is_stmt 0 view .LVU70
 342 000c 0F33     		adds	r3, r3, #15
 343 000e 0993     		str	r3, [sp, #36]
 222:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 344              		.loc 1 222 3 is_stmt 1 view .LVU71
 222:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 345              		.loc 1 222 34 is_stmt 0 view .LVU72
 346 0010 0023     		movs	r3, #0
 347 0012 0E93     		str	r3, [sp, #56]
 223:Src/main.c    ****   {
 348              		.loc 1 223 3 is_stmt 1 view .LVU73
 223:Src/main.c    ****   {
 349              		.loc 1 223 7 is_stmt 0 view .LVU74
 350 0014 05A8     		add	r0, sp, #20
 351 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 352              	.LVL21:
 223:Src/main.c    ****   {
 353              		.loc 1 223 6 discriminator 1 view .LVU75
 354 001a 0028     		cmp	r0, #0
 355 001c 1ED1     		bne	.L30
 230:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 356              		.loc 1 230 3 is_stmt 1 view .LVU76
 230:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 13


 357              		.loc 1 230 31 is_stmt 0 view .LVU77
 358 001e 0723     		movs	r3, #7
 359 0020 0193     		str	r3, [sp, #4]
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 360              		.loc 1 231 3 is_stmt 1 view .LVU78
 231:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 361              		.loc 1 231 34 is_stmt 0 view .LVU79
 362 0022 0023     		movs	r3, #0
 363 0024 0293     		str	r3, [sp, #8]
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 364              		.loc 1 232 3 is_stmt 1 view .LVU80
 232:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 365              		.loc 1 232 35 is_stmt 0 view .LVU81
 366 0026 0393     		str	r3, [sp, #12]
 233:Src/main.c    **** 
 367              		.loc 1 233 3 is_stmt 1 view .LVU82
 233:Src/main.c    **** 
 368              		.loc 1 233 36 is_stmt 0 view .LVU83
 369 0028 0493     		str	r3, [sp, #16]
 235:Src/main.c    ****   {
 370              		.loc 1 235 3 is_stmt 1 view .LVU84
 235:Src/main.c    ****   {
 371              		.loc 1 235 7 is_stmt 0 view .LVU85
 372 002a 0021     		movs	r1, #0
 373 002c 01A8     		add	r0, sp, #4
 374 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 375              	.LVL22:
 235:Src/main.c    ****   {
 376              		.loc 1 235 6 discriminator 1 view .LVU86
 377 0032 0028     		cmp	r0, #0
 378 0034 16D1     		bne	.L31
 242:Src/main.c    **** 
 379              		.loc 1 242 3 is_stmt 1 view .LVU87
 242:Src/main.c    **** 
 380              		.loc 1 242 22 is_stmt 0 view .LVU88
 381 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 382              	.LVL23:
 242:Src/main.c    **** 
 383              		.loc 1 242 3 discriminator 1 view .LVU89
 384 003a FA21     		movs	r1, #250
 385 003c 8900     		lsls	r1, r1, #2
 386 003e FFF7FEFF 		bl	__aeabi_uidiv
 387              	.LVL24:
 388 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 389              	.LVL25:
 246:Src/main.c    **** 
 390              		.loc 1 246 3 is_stmt 1 view .LVU90
 391 0046 0420     		movs	r0, #4
 392 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 393              	.LVL26:
 249:Src/main.c    **** }
 394              		.loc 1 249 3 view .LVU91
 395 004c 0120     		movs	r0, #1
 396 004e 0022     		movs	r2, #0
 397 0050 0021     		movs	r1, #0
 398 0052 4042     		rsbs	r0, r0, #0
 399 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 14


 400              	.LVL27:
 250:Src/main.c    **** 
 401              		.loc 1 250 1 is_stmt 0 view .LVU92
 402 0058 13B0     		add	sp, sp, #76
 403              		@ sp needed
 404 005a 00BD     		pop	{pc}
 405              	.L30:
 225:Src/main.c    ****   }
 406              		.loc 1 225 5 is_stmt 1 view .LVU93
 407 005c 0348     		ldr	r0, .L32
 408 005e E121     		movs	r1, #225
 409 0060 FFF7FEFF 		bl	_Error_Handler
 410              	.LVL28:
 411              	.L31:
 237:Src/main.c    ****   }
 412              		.loc 1 237 5 view .LVU94
 413 0064 0148     		ldr	r0, .L32
 414 0066 ED21     		movs	r1, #237
 415 0068 FFF7FEFF 		bl	_Error_Handler
 416              	.LVL29:
 417              	.L33:
 418              		.align	2
 419              	.L32:
 420 006c 00000000 		.word	.LC12
 421              		.cfi_endproc
 422              	.LFE44:
 424              		.section	.text.main,"ax",%progbits
 425              		.align	1
 426              		.global	main
 427              		.syntax unified
 428              		.code	16
 429              		.thumb_func
 431              	main:
 432              	.LFB40:
  82:Src/main.c    ****   HAL_Init();           // Reset of all peripherals, init the Flash and Systick
 433              		.loc 1 82 1 view -0
 434              		.cfi_startproc
 435              		@ Volatile: function does not return.
 436              		@ args = 0, pretend = 0, frame = 24
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 0000 70B5     		push	{r4, r5, r6, lr}
 439              	.LCFI4:
 440              		.cfi_def_cfa_offset 16
 441              		.cfi_offset 4, -16
 442              		.cfi_offset 5, -12
 443              		.cfi_offset 6, -8
 444              		.cfi_offset 14, -4
 445 0002 86B0     		sub	sp, sp, #24
 446              	.LCFI5:
 447              		.cfi_def_cfa_offset 40
  83:Src/main.c    ****   SystemClock_Config(); // Configure the system clock
 448              		.loc 1 83 3 view .LVU96
 449 0004 FFF7FEFF 		bl	HAL_Init
 450              	.LVL30:
  84:Src/main.c    **** 
 451              		.loc 1 84 3 view .LVU97
 452 0008 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 15


 453              	.LVL31:
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 454              		.loc 1 86 3 view .LVU98
 455              	.LBB9:
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 456              		.loc 1 86 3 view .LVU99
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 457              		.loc 1 86 3 view .LVU100
 458 000c 3E4D     		ldr	r5, .L36
 459 000e 6B69     		ldr	r3, [r5, #20]
 460 0010 8022     		movs	r2, #128
 461 0012 1203     		lsls	r2, r2, #12
 462 0014 1343     		orrs	r3, r2
 463 0016 6B61     		str	r3, [r5, #20]
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 464              		.loc 1 86 3 view .LVU101
 465 0018 6B69     		ldr	r3, [r5, #20]
 466 001a 1340     		ands	r3, r2
 467 001c 0093     		str	r3, [sp]
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 468              		.loc 1 86 3 view .LVU102
 469 001e 009B     		ldr	r3, [sp]
 470              	.LBE9:
  86:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function
 471              		.loc 1 86 3 view .LVU103
  88:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
 472              		.loc 1 88 3 view .LVU104
  88:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
 473              		.loc 1 88 20 is_stmt 0 view .LVU105
 474 0020 1422     		movs	r2, #20
 475 0022 0021     		movs	r1, #0
 476 0024 01A8     		add	r0, sp, #4
 477 0026 FFF7FEFF 		bl	memset
 478              	.LVL32:
 479 002a FC23     		movs	r3, #252
 480 002c 9B00     		lsls	r3, r3, #2
 481 002e 0193     		str	r3, [sp, #4]
 482 0030 0126     		movs	r6, #1
 483 0032 0296     		str	r6, [sp, #8]
  92:Src/main.c    ****                                   // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start P
 484              		.loc 1 92 3 is_stmt 1 view .LVU106
 485 0034 354C     		ldr	r4, .L36+4
 486 0036 01A9     		add	r1, sp, #4
 487 0038 2000     		movs	r0, r4
 488 003a FFF7FEFF 		bl	HAL_GPIO_Init
 489              	.LVL33:
 100:Src/main.c    ****   GPIOC->MODER &= ~(1 << 9);  // clear PC4 bit
 490              		.loc 1 100 3 view .LVU107
 100:Src/main.c    ****   GPIOC->MODER &= ~(1 << 9);  // clear PC4 bit
 491              		.loc 1 100 8 is_stmt 0 view .LVU108
 492 003e 2368     		ldr	r3, [r4]
 100:Src/main.c    ****   GPIOC->MODER &= ~(1 << 9);  // clear PC4 bit
 493              		.loc 1 100 16 view .LVU109
 494 0040 334A     		ldr	r2, .L36+8
 495 0042 1340     		ands	r3, r2
 496 0044 2360     		str	r3, [r4]
 101:Src/main.c    ****   GPIOC->MODER |= (1 << 9);   // set to alternate (10)
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 16


 497              		.loc 1 101 3 is_stmt 1 view .LVU110
 101:Src/main.c    ****   GPIOC->MODER |= (1 << 9);   // set to alternate (10)
 498              		.loc 1 101 8 is_stmt 0 view .LVU111
 499 0046 2368     		ldr	r3, [r4]
 101:Src/main.c    ****   GPIOC->MODER |= (1 << 9);   // set to alternate (10)
 500              		.loc 1 101 16 view .LVU112
 501 0048 324A     		ldr	r2, .L36+12
 502 004a 1340     		ands	r3, r2
 503 004c 2360     		str	r3, [r4]
 102:Src/main.c    ****   GPIOC->MODER &= ~(1 << 10); // clear PC5 bit
 504              		.loc 1 102 3 is_stmt 1 view .LVU113
 102:Src/main.c    ****   GPIOC->MODER &= ~(1 << 10); // clear PC5 bit
 505              		.loc 1 102 8 is_stmt 0 view .LVU114
 506 004e 2268     		ldr	r2, [r4]
 102:Src/main.c    ****   GPIOC->MODER &= ~(1 << 10); // clear PC5 bit
 507              		.loc 1 102 16 view .LVU115
 508 0050 8023     		movs	r3, #128
 509 0052 9B00     		lsls	r3, r3, #2
 510 0054 1343     		orrs	r3, r2
 511 0056 2360     		str	r3, [r4]
 103:Src/main.c    ****   GPIOC->MODER &= ~(1 << 11); // clear PC5 bit
 512              		.loc 1 103 3 is_stmt 1 view .LVU116
 103:Src/main.c    ****   GPIOC->MODER &= ~(1 << 11); // clear PC5 bit
 513              		.loc 1 103 8 is_stmt 0 view .LVU117
 514 0058 2368     		ldr	r3, [r4]
 103:Src/main.c    ****   GPIOC->MODER &= ~(1 << 11); // clear PC5 bit
 515              		.loc 1 103 16 view .LVU118
 516 005a 2F4A     		ldr	r2, .L36+16
 517 005c 1340     		ands	r3, r2
 518 005e 2360     		str	r3, [r4]
 104:Src/main.c    ****   GPIOC->MODER |= (1 << 11);  // set to alternate (10)
 519              		.loc 1 104 3 is_stmt 1 view .LVU119
 104:Src/main.c    ****   GPIOC->MODER |= (1 << 11);  // set to alternate (10)
 520              		.loc 1 104 8 is_stmt 0 view .LVU120
 521 0060 2368     		ldr	r3, [r4]
 104:Src/main.c    ****   GPIOC->MODER |= (1 << 11);  // set to alternate (10)
 522              		.loc 1 104 16 view .LVU121
 523 0062 2E4A     		ldr	r2, .L36+20
 524 0064 1340     		ands	r3, r2
 525 0066 2360     		str	r3, [r4]
 105:Src/main.c    ****   // Assign AF1 to PC4 and PC5 -- 0001
 526              		.loc 1 105 3 is_stmt 1 view .LVU122
 105:Src/main.c    ****   // Assign AF1 to PC4 and PC5 -- 0001
 527              		.loc 1 105 8 is_stmt 0 view .LVU123
 528 0068 2268     		ldr	r2, [r4]
 105:Src/main.c    ****   // Assign AF1 to PC4 and PC5 -- 0001
 529              		.loc 1 105 16 view .LVU124
 530 006a 8023     		movs	r3, #128
 531 006c 1B01     		lsls	r3, r3, #4
 532 006e 1343     		orrs	r3, r2
 533 0070 2360     		str	r3, [r4]
 107:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 17); // AFSEL4 bit 17 (clear)
 534              		.loc 1 107 3 is_stmt 1 view .LVU125
 107:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 17); // AFSEL4 bit 17 (clear)
 535              		.loc 1 107 13 is_stmt 0 view .LVU126
 536 0072 226A     		ldr	r2, [r4, #32]
 107:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 17); // AFSEL4 bit 17 (clear)
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 17


 537              		.loc 1 107 17 view .LVU127
 538 0074 8023     		movs	r3, #128
 539 0076 5B02     		lsls	r3, r3, #9
 540 0078 1343     		orrs	r3, r2
 541 007a 2362     		str	r3, [r4, #32]
 108:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 18); // AFSEL4 bit 18 (clear)
 542              		.loc 1 108 3 is_stmt 1 view .LVU128
 108:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 18); // AFSEL4 bit 18 (clear)
 543              		.loc 1 108 13 is_stmt 0 view .LVU129
 544 007c 236A     		ldr	r3, [r4, #32]
 108:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 18); // AFSEL4 bit 18 (clear)
 545              		.loc 1 108 17 view .LVU130
 546 007e 284A     		ldr	r2, .L36+24
 547 0080 1340     		ands	r3, r2
 548 0082 2362     		str	r3, [r4, #32]
 109:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 19); // AFSEL4 bit 19 (clear)
 549              		.loc 1 109 3 is_stmt 1 view .LVU131
 109:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 19); // AFSEL4 bit 19 (clear)
 550              		.loc 1 109 13 is_stmt 0 view .LVU132
 551 0084 236A     		ldr	r3, [r4, #32]
 109:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 19); // AFSEL4 bit 19 (clear)
 552              		.loc 1 109 17 view .LVU133
 553 0086 274A     		ldr	r2, .L36+28
 554 0088 1340     		ands	r3, r2
 555 008a 2362     		str	r3, [r4, #32]
 110:Src/main.c    ****   GPIOC->AFR[0] |= (1 << 20);  // AFSEL5 bit 20
 556              		.loc 1 110 3 is_stmt 1 view .LVU134
 110:Src/main.c    ****   GPIOC->AFR[0] |= (1 << 20);  // AFSEL5 bit 20
 557              		.loc 1 110 13 is_stmt 0 view .LVU135
 558 008c 236A     		ldr	r3, [r4, #32]
 110:Src/main.c    ****   GPIOC->AFR[0] |= (1 << 20);  // AFSEL5 bit 20
 559              		.loc 1 110 17 view .LVU136
 560 008e 264A     		ldr	r2, .L36+32
 561 0090 1340     		ands	r3, r2
 562 0092 2362     		str	r3, [r4, #32]
 111:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 21); // AFSEL5 bit 21 (clear)
 563              		.loc 1 111 3 is_stmt 1 view .LVU137
 111:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 21); // AFSEL5 bit 21 (clear)
 564              		.loc 1 111 13 is_stmt 0 view .LVU138
 565 0094 226A     		ldr	r2, [r4, #32]
 111:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 21); // AFSEL5 bit 21 (clear)
 566              		.loc 1 111 17 view .LVU139
 567 0096 8023     		movs	r3, #128
 568 0098 5B03     		lsls	r3, r3, #13
 569 009a 1343     		orrs	r3, r2
 570 009c 2362     		str	r3, [r4, #32]
 112:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 22); // AFSEL5 bit 22 (clear)
 571              		.loc 1 112 3 is_stmt 1 view .LVU140
 112:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 22); // AFSEL5 bit 22 (clear)
 572              		.loc 1 112 13 is_stmt 0 view .LVU141
 573 009e 236A     		ldr	r3, [r4, #32]
 112:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 22); // AFSEL5 bit 22 (clear)
 574              		.loc 1 112 17 view .LVU142
 575 00a0 224A     		ldr	r2, .L36+36
 576 00a2 1340     		ands	r3, r2
 577 00a4 2362     		str	r3, [r4, #32]
 113:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 23); // AFSEL5 bit 23 (clear)
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 18


 578              		.loc 1 113 3 is_stmt 1 view .LVU143
 113:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 23); // AFSEL5 bit 23 (clear)
 579              		.loc 1 113 13 is_stmt 0 view .LVU144
 580 00a6 236A     		ldr	r3, [r4, #32]
 113:Src/main.c    ****   GPIOC->AFR[0] &= ~(1 << 23); // AFSEL5 bit 23 (clear)
 581              		.loc 1 113 17 view .LVU145
 582 00a8 214A     		ldr	r2, .L36+40
 583 00aa 1340     		ands	r3, r2
 584 00ac 2362     		str	r3, [r4, #32]
 114:Src/main.c    **** 
 585              		.loc 1 114 3 is_stmt 1 view .LVU146
 114:Src/main.c    **** 
 586              		.loc 1 114 13 is_stmt 0 view .LVU147
 587 00ae 236A     		ldr	r3, [r4, #32]
 114:Src/main.c    **** 
 588              		.loc 1 114 17 view .LVU148
 589 00b0 204A     		ldr	r2, .L36+44
 590 00b2 1340     		ands	r3, r2
 591 00b4 2362     		str	r3, [r4, #32]
 118:Src/main.c    ****   // Set the Baud rate for communication to be 115200 bits/second.
 592              		.loc 1 118 3 is_stmt 1 view .LVU149
 118:Src/main.c    ****   // Set the Baud rate for communication to be 115200 bits/second.
 593              		.loc 1 118 16 is_stmt 0 view .LVU150
 594 00b6 8023     		movs	r3, #128
 595 00b8 DB02     		lsls	r3, r3, #11
 596 00ba EB61     		str	r3, [r5, #28]
 120:Src/main.c    ****   // Enable transmitter and receiver hardware
 597              		.loc 1 120 3 is_stmt 1 view .LVU151
 120:Src/main.c    ****   // Enable transmitter and receiver hardware
 598              		.loc 1 120 17 is_stmt 0 view .LVU152
 599 00bc FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 600              	.LVL34:
 120:Src/main.c    ****   // Enable transmitter and receiver hardware
 601              		.loc 1 120 39 discriminator 1 view .LVU153
 602 00c0 9621     		movs	r1, #150
 603 00c2 8901     		lsls	r1, r1, #6
 604 00c4 FFF7FEFF 		bl	__aeabi_uidiv
 605              	.LVL35:
 120:Src/main.c    ****   // Enable transmitter and receiver hardware
 606              		.loc 1 120 15 discriminator 1 view .LVU154
 607 00c8 1B4B     		ldr	r3, .L36+48
 608 00ca D860     		str	r0, [r3, #12]
 122:Src/main.c    ****   USART3->CR1 |= (1 << 2); // Enable receiver
 609              		.loc 1 122 3 is_stmt 1 view .LVU155
 122:Src/main.c    ****   USART3->CR1 |= (1 << 2); // Enable receiver
 610              		.loc 1 122 9 is_stmt 0 view .LVU156
 611 00cc 1A68     		ldr	r2, [r3]
 122:Src/main.c    ****   USART3->CR1 |= (1 << 2); // Enable receiver
 612              		.loc 1 122 15 view .LVU157
 613 00ce 0821     		movs	r1, #8
 614 00d0 0A43     		orrs	r2, r1
 615 00d2 1A60     		str	r2, [r3]
 123:Src/main.c    ****   USART3->CR1 |= (1 << 5); // Enable RXNE interrupt
 616              		.loc 1 123 3 is_stmt 1 view .LVU158
 123:Src/main.c    ****   USART3->CR1 |= (1 << 5); // Enable RXNE interrupt
 617              		.loc 1 123 9 is_stmt 0 view .LVU159
 618 00d4 1A68     		ldr	r2, [r3]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 19


 123:Src/main.c    ****   USART3->CR1 |= (1 << 5); // Enable RXNE interrupt
 619              		.loc 1 123 15 view .LVU160
 620 00d6 0439     		subs	r1, r1, #4
 621 00d8 0A43     		orrs	r2, r1
 622 00da 1A60     		str	r2, [r3]
 124:Src/main.c    ****   USART3->CR1 |= (1 << 0); // Enable USART
 623              		.loc 1 124 3 is_stmt 1 view .LVU161
 124:Src/main.c    ****   USART3->CR1 |= (1 << 0); // Enable USART
 624              		.loc 1 124 9 is_stmt 0 view .LVU162
 625 00dc 1A68     		ldr	r2, [r3]
 124:Src/main.c    ****   USART3->CR1 |= (1 << 0); // Enable USART
 626              		.loc 1 124 15 view .LVU163
 627 00de 1C31     		adds	r1, r1, #28
 628 00e0 0A43     		orrs	r2, r1
 629 00e2 1A60     		str	r2, [r3]
 125:Src/main.c    ****   // **** Initialize the USART **** //
 630              		.loc 1 125 3 is_stmt 1 view .LVU164
 125:Src/main.c    ****   // **** Initialize the USART **** //
 631              		.loc 1 125 9 is_stmt 0 view .LVU165
 632 00e4 1A68     		ldr	r2, [r3]
 125:Src/main.c    ****   // **** Initialize the USART **** //
 633              		.loc 1 125 15 view .LVU166
 634 00e6 3243     		orrs	r2, r6
 635 00e8 1A60     		str	r2, [r3]
 129:Src/main.c    ****   // Set the priority for the interrupt to 0
 636              		.loc 1 129 3 is_stmt 1 view .LVU167
 637              	.LVL36:
 638              	.LBB10:
 639              	.LBI10:
 640              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 20


  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 21


  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 22


 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 23


 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 24


 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 25


 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 26


 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 27


 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 28


 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 29


 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 30


 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 641              		.loc 2 623 22 view .LVU168
 642              	.LBB11:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643              		.loc 2 625 3 view .LVU169
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 644              		.loc 2 627 5 view .LVU170
 645              		.loc 2 627 20 is_stmt 0 view .LVU171
 646 00ea 144B     		ldr	r3, .L36+52
 647 00ec 8022     		movs	r2, #128
 648 00ee 9205     		lsls	r2, r2, #22
 649 00f0 1A60     		str	r2, [r3]
 650              	.LVL37:
 651              		.loc 2 627 20 view .LVU172
 652              	.LBE11:
 653              	.LBE10:
 131:Src/main.c    ****   transmitString("CMD? \0");
 654              		.loc 1 131 3 is_stmt 1 view .LVU173
 655              	.LBB12:
 656              	.LBI12:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 31


 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 32


 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 657              		.loc 2 730 22 view .LVU174
 658              	.LBB13:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 659              		.loc 2 732 3 view .LVU175
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 660              		.loc 2 734 5 view .LVU176
 661              		.loc 2 734 52 is_stmt 0 view .LVU177
 662 00f2 C721     		movs	r1, #199
 663 00f4 8900     		lsls	r1, r1, #2
 664 00f6 5A58     		ldr	r2, [r3, r1]
 665              		.loc 2 734 33 view .LVU178
 666 00f8 1148     		ldr	r0, .L36+56
 667 00fa 0240     		ands	r2, r0
 668              		.loc 2 734 30 view .LVU179
 669 00fc 5A50     		str	r2, [r3, r1]
 670              	.LVL38:
 671              		.loc 2 734 30 view .LVU180
 672              	.LBE13:
 673              	.LBE12:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 33


 132:Src/main.c    ****   while (1)
 674              		.loc 1 132 3 is_stmt 1 view .LVU181
 675 00fe 1148     		ldr	r0, .L36+60
 676 0100 FFF7FEFF 		bl	transmitString
 677              	.LVL39:
 678              	.L35:
 133:Src/main.c    ****   {
 679              		.loc 1 133 3 view .LVU182
 135:Src/main.c    **** }
 680              		.loc 1 135 3 view .LVU183
 133:Src/main.c    ****   {
 681              		.loc 1 133 9 view .LVU184
 682 0104 FEE7     		b	.L35
 683              	.L37:
 684 0106 C046     		.align	2
 685              	.L36:
 686 0108 00100240 		.word	1073876992
 687 010c 00080048 		.word	1207961600
 688 0110 FFFEFFFF 		.word	-257
 689 0114 FFFDFFFF 		.word	-513
 690 0118 FFFBFFFF 		.word	-1025
 691 011c FFF7FFFF 		.word	-2049
 692 0120 FFFFFDFF 		.word	-131073
 693 0124 FFFFFBFF 		.word	-262145
 694 0128 FFFFF7FF 		.word	-524289
 695 012c FFFFDFFF 		.word	-2097153
 696 0130 FFFFBFFF 		.word	-4194305
 697 0134 FFFF7FFF 		.word	-8388609
 698 0138 00480040 		.word	1073760256
 699 013c 00E100E0 		.word	-536813312
 700 0140 FF00FFFF 		.word	-65281
 701 0144 50000000 		.word	.LANCHOR0+80
 702              		.cfi_endproc
 703              	.LFE40:
 705              		.global	newData
 706              		.section	.bss.newData,"aw",%nobits
 707              		.align	2
 710              	newData:
 711 0000 00000000 		.space	4
 712              		.global	receivedChar
 713              		.section	.bss.receivedChar,"aw",%nobits
 716              	receivedChar:
 717 0000 00       		.space	1
 718              		.section	.rodata
 719              		.align	2
 720              		.set	.LANCHOR0,. + 0
 721              	.LC10:
 722 0000 4572726F 		.ascii	"Error: Input needs to be 2 characters with correct "
 722      723A2049 
 722      6E707574 
 722      206E6565 
 722      64732074 
 723 0033 63726974 		.ascii	"criteria of r,b,o,g and 0-2\000\000"
 723      65726961 
 723      206F6620 
 723      722C622C 
 723      6F2C6720 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 34


 724              	.LC14:
 725 0050 434D443F 		.ascii	"CMD? \000\000"
 725      200000
 726              		.text
 727              	.Letext0:
 728              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 729              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 730              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 731              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 732              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 733              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 734              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 735              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 736              		.file 11 "<built-in>"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:19     .text.transmitCharacter:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:25     .text.transmitCharacter:00000000 transmitCharacter
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:52     .text.transmitCharacter:00000010 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:57     .text.transmitString:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:63     .text.transmitString:00000000 transmitString
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:113    .rodata.USART3_IRQHandler.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:126    .text.USART3_IRQHandler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:132    .text.USART3_IRQHandler:00000000 USART3_IRQHandler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:269    .text.USART3_IRQHandler:00000090 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:716    .bss.receivedChar:00000000 receivedChar
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:710    .bss.newData:00000000 newData
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:282    .text._Error_Handler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:288    .text._Error_Handler:00000000 _Error_Handler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:306    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:311    .text.SystemClock_Config:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:317    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:420    .text.SystemClock_Config:0000006c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:425    .text.main:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:431    .text.main:00000000 main
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:686    .text.main:00000108 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:707    .bss.newData:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:717    .bss.receivedChar:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpAOzHJ.s:719    .rodata:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_TogglePin
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
memset
HAL_GPIO_Init
