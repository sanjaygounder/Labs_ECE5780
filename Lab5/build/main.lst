ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.write,"ax",%progbits
  19              		.align	1
  20              		.global	write
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	write:
  26              	.LVL0:
  27              	.LFB41:
   1:Src/main.c    **** /**
   2:Src/main.c    ****  *
   3:Src/main.c    ****  * Sanjay Gounder
   4:Src/main.c    ****  * u1144264
   5:Src/main.c    ****  *
   6:Src/main.c    **** ******************************************************************************
   7:Src/main.c    **** * File Name          : main.c
   8:Src/main.c    **** * Description        : Main program body
   9:Src/main.c    **** ******************************************************************************
  10:Src/main.c    **** ** This notice applies to any and all portions of this file
  11:Src/main.c    **** * that are not between comment pairs USER CODE BEGIN and
  12:Src/main.c    **** * USER CODE END. Other portions of this file, whether
  13:Src/main.c    **** * inserted by the user or by software development tools
  14:Src/main.c    **** * are owned by their respective copyright owners.
  15:Src/main.c    **** *
  16:Src/main.c    **** * COPYRIGHT(c) 2018 STMicroelectronics
  17:Src/main.c    ****  *
  18:Src/main.c    ****  * Redistribution and use in source and binary forms, with or without modification,
  19:Src/main.c    ****  * are permitted provided that the following conditions are met:
  20:Src/main.c    ****  *   1. Redistributions of source code must retain the above copyright notice,
  21:Src/main.c    ****  *      this list of conditions and the following disclaimer.
  22:Src/main.c    ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  23:Src/main.c    ****  *      this list of conditions and the following disclaimer in the documentation
  24:Src/main.c    ****  *      and/or other materials provided with the distribution.
  25:Src/main.c    ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  26:Src/main.c    ****  *      may be used to endorse or promote products derived from this software
  27:Src/main.c    ****  *      without specific prior written permission.
  28:Src/main.c    ****  *
  29:Src/main.c    ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:Src/main.c    ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  31:Src/main.c    ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 2


  32:Src/main.c    ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  33:Src/main.c    ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:Src/main.c    ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  35:Src/main.c    ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  36:Src/main.c    ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  37:Src/main.c    ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  38:Src/main.c    ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  39:Src/main.c    ****  *
  40:Src/main.c    ****  ******************************************************************************
  41:Src/main.c    ****  */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  44:Src/main.c    **** #include "main.h"
  45:Src/main.c    **** #include "stm32f0xx_hal.h"
  46:Src/main.c    **** #include "stm32f072xb.h"
  47:Src/main.c    **** void _Error_Handler(char * file, int line);
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE BEGIN Includes */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE END Includes */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** void write(char val);
  63:Src/main.c    **** char read();
  64:Src/main.c    **** void stop();
  65:Src/main.c    **** int16_t readXAxis();
  66:Src/main.c    **** int16_t readYAxis();
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PFP */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** int main(void)
  78:Src/main.c    **** {
  79:Src/main.c    ****   HAL_Init();               // Reset of all peripherals, init the Flash and Systick
  80:Src/main.c    ****   SystemClock_Config();     // Configure the system clock
  81:Src/main.c    **** 
  82:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable the GPIOB clock in the RCC
  83:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
  84:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
  85:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
  86:Src/main.c    ****   GPIO_InitTypeDef initStr = {GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9,
  87:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
  88:Src/main.c    ****                               GPIO_SPEED_FREQ_LOW,
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 3


  89:Src/main.c    ****                               GPIO_NOPULL};
  90:Src/main.c    ****   GPIO_InitTypeDef initStr_PC0 = {GPIO_PIN_0 | GPIO_PIN_13 | GPIO_PIN_14};
  91:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC6,7,8 & PC9 (LEDs)
  92:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr_PC0); // Initialize pins PC0
  93:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (PB0)
  94:Src/main.c    ****   // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start PC8 high (orange)
  95:Src/main.c    **** 
  96:Src/main.c    ****   // Set PB11 to alternate function mode, open-drain output type, and select I2C2_SDA as its altern
  97:Src/main.c    ****   GPIOB->MODER |= (1 << 23); // PB11 to AF mode (10)
  98:Src/main.c    ****   GPIOB->OTYPER |= (1 << 11); // PB11 to open-drain output (1)
  99:Src/main.c    ****   GPIOB ->AFR[1] |= (1 << 12); // Set it to AF1 (0001)
 100:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 <<13) | ~(1 <<14) | ~(1 << 15); // Set it to AF1 (0001)  
 101:Src/main.c    **** 
 102:Src/main.c    ****   // Set PB13 to alternate function mode, open-drain output type, and select I2C2_SCL as its altern
 103:Src/main.c    ****   GPIOB->MODER |= (1 << 27); // PB13 to AF mode (10)
 104:Src/main.c    ****   GPIOB->OTYPER |= (1 << 13); // PB13 to open-drain output(1)
 105:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 << 21) | ~(1 << 23); // Set it to AF5 (0101)
 106:Src/main.c    ****   GPIOB->AFR[1] |= (1 << 20) | (1 << 22); // Set it to AF5 (0101)
 107:Src/main.c    **** 
 108:Src/main.c    ****   // Set PB14 to output mode, push-pull output type, and initialize/set the pin high.
 109:Src/main.c    ****   GPIOB->MODER |= (1 << 28); // PB14 to ouput mode (01)    
 110:Src/main.c    ****   GPIOB->OTYPER &= ~(1 << 14); // PB14 to push-pull output type (clear)   
 111:Src/main.c    ****   GPIOB->ODR |= (1 << 14); // PB14 pin high                            
 112:Src/main.c    **** 
 113:Src/main.c    ****   // Set PC0 to output mode, push-pull output type, and initialize/set the pin high.      
 114:Src/main.c    ****   GPIOC->MODER |= (1 << 0); // PC0 set to output mode         
 115:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 0); // PC0 to push-pull output type (clear)     
 116:Src/main.c    ****   GPIOC->ODR |= (1<< 0); // PC0 pin high, I2C mode on (make sure this is working, maybe that is the
 117:Src/main.c    **** 
 118:Src/main.c    ****   // Enable I2C2 clock
 119:Src/main.c    ****   RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 120:Src/main.c    **** 
 121:Src/main.c    ****   // Configuring the Bus Timing (use 100 kHz) 
 122:Src/main.c    ****   I2C2->TIMINGR = (0x1 << 28); 
 123:Src/main.c    ****   I2C2->TIMINGR = (0x13 << 0);
 124:Src/main.c    ****   I2C2->TIMINGR = (0xF << 8);
 125:Src/main.c    ****   I2C2->TIMINGR = (0x2 << 16);
 126:Src/main.c    ****   I2C2->TIMINGR = (0x4 << 20); 
 127:Src/main.c    **** 
 128:Src/main.c    ****   // Enabling the Peripheral (PE)
 129:Src/main.c    ****   I2C2->CR1 |= I2C_CR1_PE;
 130:Src/main.c    **** 
 131:Src/main.c    ****   // ******** 5.4 Reading the Register ******** //
 132:Src/main.c    **** 
 133:Src/main.c    ****   // // Set the transaction parameters in the CR2 register
 134:Src/main.c    ****   // // Slave address (SDO), I2C2->RXDR = 0x69
 135:Src/main.c    ****   // I2C2->CR2 |= (0x69 << 1);
 136:Src/main.c    ****   // // Number of bytes to be transferred/received is 1, for part 2 it'll be (2 << 16)
 137:Src/main.c    ****   // I2C2->CR2 |= (1 << 16); 
 138:Src/main.c    **** 
 139:Src/main.c    ****   // // Set RD_WRN to WRN
 140:Src/main.c    ****   // I2C2 -> CR2 &= ~I2C_CR2_RD_WRN; // 0 is a write
 141:Src/main.c    **** 
 142:Src/main.c    ****   // // Set the START bit to begin the address frame
 143:Src/main.c    ****   // I2C2->CR2 |= (1 << 13);
 144:Src/main.c    ****   // // Wait until either of the TXIS (Transmit Register Empty/Ready) or NACKF (Slave NotAcknowledg
 145:Src/main.c    ****   // while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)))
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 4


 146:Src/main.c    ****   // {
 147:Src/main.c    ****   //   GPIOC->ODR |= (1 << 6); // Set PC6 high 
 148:Src/main.c    ****   // }
 149:Src/main.c    ****   // // Extra check to see if NACKF was the flag set --> meaning slave did not respond to the addre
 150:Src/main.c    ****   // if (I2C2->ISR & I2C_ISR_NACKF)
 151:Src/main.c    ****   // {
 152:Src/main.c    ****   //   GPIOC->ODR |= (1 << 6); // Set PC6 high 
 153:Src/main.c    ****   // }
 154:Src/main.c    ****   
 155:Src/main.c    ****   // GPIOC->ODR &= ~(1 << 6); // Clear PC6 low
 156:Src/main.c    **** 
 157:Src/main.c    ****   // // Write the address of the "WHO_AM_I" register into the I2C transmit register (TXDR)
 158:Src/main.c    ****   // I2C2->TXDR |= 0x0F;
 159:Src/main.c    **** 
 160:Src/main.c    ****   // // Wait until TC (Transfer Complete) flag is set
 161:Src/main.c    ****   // while (!(I2C2->ISR & (I2C_ISR_TC))) 
 162:Src/main.c    ****   // {
 163:Src/main.c    ****   //   GPIOC->ODR |= (1 << 8); // Set PC8 high 
 164:Src/main.c    ****   // }
 165:Src/main.c    ****   // GPIOC->ODR &= ~(1 << 8); // Clear PC8 low
 166:Src/main.c    **** 
 167:Src/main.c    ****   // // Reload CR2 register with the same parameters, but set the RD_WRN bit to indicate a read ope
 168:Src/main.c    ****   // I2C2->CR2 = 0; // resetting CR2 register
 169:Src/main.c    ****   // I2C2->CR2 |= (0x69 << 1);
 170:Src/main.c    ****   // I2C2->CR2 |= (1 << 16);
 171:Src/main.c    ****   // I2C2->CR2 |= (1 << 10); // 1 is a read
 172:Src/main.c    ****   // I2C2->CR2 |= (1 << 13); // Set the START bit again to perform a I2C restart condition
 173:Src/main.c    **** 
 174:Src/main.c    ****   // // Wait until either RXNE or NACKF flags are set
 175:Src/main.c    ****   // while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 176:Src/main.c    ****   // {
 177:Src/main.c    ****   //   GPIOC->ODR |= (1 << 6); // Set PC6 high (testing purposes)
 178:Src/main.c    ****   // }
 179:Src/main.c    ****   // GPIOC->ODR &= ~(1 << 6); // Clear PC6 low
 180:Src/main.c    **** 
 181:Src/main.c    ****   // // Extra check to see if NACKF was the flag set --> meaning slave did not respond to the addre
 182:Src/main.c    ****   // if (I2C2->ISR & I2C_ISR_NACKF)
 183:Src/main.c    ****   // {
 184:Src/main.c    ****   //   GPIOC->ODR |= (1 << 6); // Set PC6 high (testing purposes)
 185:Src/main.c    ****   // }
 186:Src/main.c    **** 
 187:Src/main.c    ****   // // Check the contents of the RXDR register to see if it matches the expected value (0xD4)
 188:Src/main.c    ****   // if (I2C2->RXDR == 0xD3) 
 189:Src/main.c    ****   // {
 190:Src/main.c    ****   //   GPIOC->ODR |= (1 << 7); // Set PC7 (blue) high (testing purposes), shows the register value 
 191:Src/main.c    ****   //   I2C2->CR2 |= (1 << 14); // Set STOP bit
 192:Src/main.c    ****   // }
 193:Src/main.c    **** 
 194:Src/main.c    ****   // while(1){
 195:Src/main.c    **** 
 196:Src/main.c    ****   // }
 197:Src/main.c    **** 
 198:Src/main.c    ****   // ******** 5.5 Initializing the Gyroscope ******** //
 199:Src/main.c    ****   write(0x20);
 200:Src/main.c    **** 
 201:Src/main.c    ****   // Write ctrlReg1Value to the CTRL_REG1 register of the gyroscope
 202:Src/main.c    ****   I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); // Clear SADD and NBYTES
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 5


 203:Src/main.c    **** 	I2C2->CR2 &= ~(1 << 10); 
 204:Src/main.c    ****   I2C2->CR2 |= (0x69 << 1) | (2 << 16); // Addressing the gyroscope
 205:Src/main.c    **** 
 206:Src/main.c    ****   // Set the START bit to begin the address frame
 207:Src/main.c    ****   I2C2->CR2 |= I2C_CR2_START;
 208:Src/main.c    **** 
 209:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) 
 210:Src/main.c    ****   {
 211:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 212:Src/main.c    ****     // Handle the error
 213:Src/main.c    ****   }
 214:Src/main.c    ****   
 215:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 216:Src/main.c    ****   {
 217:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 218:Src/main.c    ****     // Handle NACK error
 219:Src/main.c    ****   }
 220:Src/main.c    **** 
 221:Src/main.c    ****   I2C2->TXDR = 0x20; // Register address of CTRL_REG1
 222:Src/main.c    **** 
 223:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) 
 224:Src/main.c    ****   {
 225:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 226:Src/main.c    ****     // Handle the error
 227:Src/main.c    ****   }
 228:Src/main.c    ****   
 229:Src/main.c    **** 
 230:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 231:Src/main.c    ****   {
 232:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 233:Src/main.c    ****     // Handle NACK error
 234:Src/main.c    ****   }
 235:Src/main.c    ****   
 236:Src/main.c    ****   //bit pattern to turn on Xen, Yen, and PD/Noraml mode 
 237:Src/main.c    ****   I2C2->TXDR = 0x0B; // 0x0B => 0000 1011
 238:Src/main.c    **** 
 239:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TC | I2C_ISR_NACKF)))
 240:Src/main.c    ****   {
 241:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 242:Src/main.c    ****     // Handle the error
 243:Src/main.c    ****   }
 244:Src/main.c    **** 
 245:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 246:Src/main.c    ****   {
 247:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 248:Src/main.c    ****     // Handle NACK error
 249:Src/main.c    ****   }
 250:Src/main.c    **** 
 251:Src/main.c    ****   // read CTRL_REG1 to make sure data is set correctly
 252:Src/main.c    **** 	write(0x20);
 253:Src/main.c    **** 	if (read() != 0x0b) {
 254:Src/main.c    **** 		GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED;
 255:Src/main.c    **** 	}
 256:Src/main.c    **** 
 257:Src/main.c    ****   // ******** 5.6 Exercise Specifications ******** //  
 258:Src/main.c    **** 
 259:Src/main.c    ****   // Clear all LEDs
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 6


 260:Src/main.c    ****   GPIOC->BSRR |= (1 << (6 + 16)); // Clear PC6 to turn off the red LED
 261:Src/main.c    ****   GPIOC->BSRR |= (1 << (7 + 16)); // Clear PC7 to turn off the blue LED
 262:Src/main.c    ****   GPIOC->BSRR |= (1 << (8 + 16)); // Clear PC8 to turn off the orange LED
 263:Src/main.c    ****   GPIOC->BSRR |= (1 << (9 + 16)); // Clear PC9 to turn off the green LED
 264:Src/main.c    **** 
 265:Src/main.c    ****   int16_t xAxis = 0;
 266:Src/main.c    **** 	int16_t yAxis = 0;
 267:Src/main.c    **** 	const int16_t threshold = 0x01FF;
 268:Src/main.c    **** 
 269:Src/main.c    ****   while (1) {
 270:Src/main.c    **** 		xAxis = readXAxis();
 271:Src/main.c    **** 		yAxis = readYAxis();
 272:Src/main.c    **** 		
 273:Src/main.c    **** 		if (xAxis > threshold) {
 274:Src/main.c    **** 			GPIOC->BSRR |= (1 << 6); // Set PC6 to turn on the red LED
 275:Src/main.c    **** 		}
 276:Src/main.c    **** 		else {
 277:Src/main.c    **** 			GPIOC->BSRR |= (1 << (6 + 16)); // Clear PC6 to turn off the red LED
 278:Src/main.c    **** 		}
 279:Src/main.c    **** 		
 280:Src/main.c    **** 		if (yAxis < 0 - threshold) {
 281:Src/main.c    **** 			GPIOC->BSRR |= (1 << 7); // Set PC7 to turn on the blue LED
 282:Src/main.c    **** 		}
 283:Src/main.c    **** 		else {
 284:Src/main.c    **** 			GPIOC->BSRR |= (1 << (7 + 16)); // Clear PC7 to turn off the blue LED
 285:Src/main.c    **** 		}
 286:Src/main.c    **** 		
 287:Src/main.c    **** 		if (xAxis < 0 - threshold) {
 288:Src/main.c    **** 			GPIOC->BSRR |= (1 << 8); // Set PC8 to turn on the orange LED
 289:Src/main.c    **** 		}
 290:Src/main.c    **** 		else {
 291:Src/main.c    **** 			GPIOC->BSRR |= (1 << (8 + 16)); // Clear PC8 to turn off the orange LED
 292:Src/main.c    **** 		}
 293:Src/main.c    **** 		
 294:Src/main.c    **** 		if (yAxis > threshold) {
 295:Src/main.c    **** 			GPIOC->BSRR |= (1 << 9); // Set PC9 to turn on the green LED
 296:Src/main.c    **** 		}
 297:Src/main.c    **** 		else {
 298:Src/main.c    **** 			GPIOC->BSRR |= (1 << (9 + 16)); // Clear PC9 to turn off the green LED
 299:Src/main.c    **** 		}
 300:Src/main.c    **** 		
 301:Src/main.c    **** 		HAL_Delay(100);
 302:Src/main.c    **** 	}
 303:Src/main.c    **** 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** 
 307:Src/main.c    **** void write(char val) {
  28              		.loc 1 307 22 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 308:Src/main.c    ****   // Set the transaction parameters in the CR2 register
 309:Src/main.c    **** 	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0)); //clear SADD and NBYTES
  33              		.loc 1 309 2 view .LVU1
  34              		.loc 1 309 6 is_stmt 0 view .LVU2
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 7


  35 0000 1E4B     		ldr	r3, .L10
  36 0002 5A68     		ldr	r2, [r3, #4]
  37              		.loc 1 309 12 view .LVU3
  38 0004 1E49     		ldr	r1, .L10+4
  39 0006 0A40     		ands	r2, r1
  40 0008 5A60     		str	r2, [r3, #4]
 310:Src/main.c    **** 	// Set to write
 311:Src/main.c    **** 	I2C2->CR2 &= ~(1 << 10);
  41              		.loc 1 311 2 is_stmt 1 view .LVU4
  42              		.loc 1 311 6 is_stmt 0 view .LVU5
  43 000a 5A68     		ldr	r2, [r3, #4]
  44              		.loc 1 311 12 view .LVU6
  45 000c 1D49     		ldr	r1, .L10+8
  46 000e 0A40     		ands	r2, r1
  47 0010 5A60     		str	r2, [r3, #4]
 312:Src/main.c    **** 	I2C2->CR2 |= (0x69 << 1) | (1 << 16);
  48              		.loc 1 312 2 is_stmt 1 view .LVU7
  49              		.loc 1 312 6 is_stmt 0 view .LVU8
  50 0012 5968     		ldr	r1, [r3, #4]
  51              		.loc 1 312 12 view .LVU9
  52 0014 1C4A     		ldr	r2, .L10+12
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A60     		str	r2, [r3, #4]
 313:Src/main.c    **** 	
 314:Src/main.c    ****   // Set the START bit to begin the address frame
 315:Src/main.c    ****   I2C2->CR2 |= I2C_CR2_START;
  55              		.loc 1 315 3 is_stmt 1 view .LVU10
  56              		.loc 1 315 7 is_stmt 0 view .LVU11
  57 001a 5968     		ldr	r1, [r3, #4]
  58              		.loc 1 315 13 view .LVU12
  59 001c 8022     		movs	r2, #128
  60 001e 9201     		lsls	r2, r2, #6
  61 0020 0A43     		orrs	r2, r1
  62 0022 5A60     		str	r2, [r3, #4]
 316:Src/main.c    **** 
 317:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF))) 
  63              		.loc 1 317 3 is_stmt 1 view .LVU13
  64              		.loc 1 317 9 is_stmt 0 view .LVU14
  65 0024 04E0     		b	.L2
  66              	.L3:
 318:Src/main.c    ****   {
 319:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
  67              		.loc 1 319 5 is_stmt 1 view .LVU15
  68              		.loc 1 319 10 is_stmt 0 view .LVU16
  69 0026 194A     		ldr	r2, .L10+16
  70 0028 9369     		ldr	r3, [r2, #24]
  71              		.loc 1 319 17 view .LVU17
  72 002a 4021     		movs	r1, #64
  73 002c 0B43     		orrs	r3, r1
  74 002e 9361     		str	r3, [r2, #24]
  75              	.L2:
 317:Src/main.c    ****   {
  76              		.loc 1 317 10 is_stmt 1 view .LVU18
 317:Src/main.c    ****   {
  77              		.loc 1 317 16 is_stmt 0 view .LVU19
  78 0030 124B     		ldr	r3, .L10
  79 0032 9B69     		ldr	r3, [r3, #24]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 8


 317:Src/main.c    ****   {
  80              		.loc 1 317 22 view .LVU20
  81 0034 1222     		movs	r2, #18
 317:Src/main.c    ****   {
  82              		.loc 1 317 10 view .LVU21
  83 0036 1A42     		tst	r2, r3
  84 0038 F5D0     		beq	.L3
 320:Src/main.c    ****     // Handle the error
 321:Src/main.c    ****   }
 322:Src/main.c    ****   
 323:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
  85              		.loc 1 323 3 is_stmt 1 view .LVU22
  86              		.loc 1 323 11 is_stmt 0 view .LVU23
  87 003a 104B     		ldr	r3, .L10
  88 003c 9B69     		ldr	r3, [r3, #24]
  89              		.loc 1 323 6 view .LVU24
  90 003e DB06     		lsls	r3, r3, #27
  91 0040 04D5     		bpl	.L4
 324:Src/main.c    ****   {
 325:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
  92              		.loc 1 325 5 is_stmt 1 view .LVU25
  93              		.loc 1 325 10 is_stmt 0 view .LVU26
  94 0042 124A     		ldr	r2, .L10+16
  95 0044 9369     		ldr	r3, [r2, #24]
  96              		.loc 1 325 17 view .LVU27
  97 0046 4021     		movs	r1, #64
  98 0048 0B43     		orrs	r3, r1
  99 004a 9361     		str	r3, [r2, #24]
 100              	.L4:
 326:Src/main.c    ****     // Handle NACK error
 327:Src/main.c    ****   }
 328:Src/main.c    **** 
 329:Src/main.c    ****   // Set register of CTRL_REG1
 330:Src/main.c    **** 	I2C2->TXDR = val;
 101              		.loc 1 330 2 is_stmt 1 view .LVU28
 102              		.loc 1 330 13 is_stmt 0 view .LVU29
 103 004c 0B4B     		ldr	r3, .L10
 104 004e 9862     		str	r0, [r3, #40]
 331:Src/main.c    **** 	
 332:Src/main.c    **** 	while (!(I2C2->ISR & (I2C_ISR_TC | I2C_ISR_NACKF)))
 105              		.loc 1 332 2 is_stmt 1 view .LVU30
 106              		.loc 1 332 8 is_stmt 0 view .LVU31
 107 0050 04E0     		b	.L5
 108              	.L6:
 333:Src/main.c    ****   {
 334:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 109              		.loc 1 334 5 is_stmt 1 view .LVU32
 110              		.loc 1 334 10 is_stmt 0 view .LVU33
 111 0052 0E4A     		ldr	r2, .L10+16
 112 0054 9369     		ldr	r3, [r2, #24]
 113              		.loc 1 334 17 view .LVU34
 114 0056 4021     		movs	r1, #64
 115 0058 0B43     		orrs	r3, r1
 116 005a 9361     		str	r3, [r2, #24]
 117              	.L5:
 332:Src/main.c    ****   {
 118              		.loc 1 332 9 is_stmt 1 view .LVU35
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 9


 332:Src/main.c    ****   {
 119              		.loc 1 332 15 is_stmt 0 view .LVU36
 120 005c 074B     		ldr	r3, .L10
 121 005e 9B69     		ldr	r3, [r3, #24]
 332:Src/main.c    ****   {
 122              		.loc 1 332 21 view .LVU37
 123 0060 5022     		movs	r2, #80
 332:Src/main.c    ****   {
 124              		.loc 1 332 9 view .LVU38
 125 0062 1A42     		tst	r2, r3
 126 0064 F5D0     		beq	.L6
 335:Src/main.c    ****     // Handle the error
 336:Src/main.c    ****   }
 337:Src/main.c    **** 
 338:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 127              		.loc 1 338 3 is_stmt 1 view .LVU39
 128              		.loc 1 338 11 is_stmt 0 view .LVU40
 129 0066 054B     		ldr	r3, .L10
 130 0068 9B69     		ldr	r3, [r3, #24]
 131              		.loc 1 338 6 view .LVU41
 132 006a DB06     		lsls	r3, r3, #27
 133 006c 04D5     		bpl	.L1
 339:Src/main.c    ****   {
 340:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 134              		.loc 1 340 5 is_stmt 1 view .LVU42
 135              		.loc 1 340 10 is_stmt 0 view .LVU43
 136 006e 074A     		ldr	r2, .L10+16
 137 0070 9369     		ldr	r3, [r2, #24]
 138              		.loc 1 340 17 view .LVU44
 139 0072 4021     		movs	r1, #64
 140 0074 0B43     		orrs	r3, r1
 141 0076 9361     		str	r3, [r2, #24]
 341:Src/main.c    ****     // Handle NACK error
 342:Src/main.c    ****   }
 343:Src/main.c    **** 
 344:Src/main.c    ****   return 0;
 142              		.loc 1 344 3 is_stmt 1 view .LVU45
 143              	.L1:
 345:Src/main.c    **** }
 144              		.loc 1 345 1 is_stmt 0 view .LVU46
 145              		@ sp needed
 146 0078 7047     		bx	lr
 147              	.L11:
 148 007a C046     		.align	2
 149              	.L10:
 150 007c 00580040 		.word	1073764352
 151 0080 00FC80FF 		.word	-8324096
 152 0084 FFFBFFFF 		.word	-1025
 153 0088 D2000100 		.word	65746
 154 008c 00080048 		.word	1207961600
 155              		.cfi_endproc
 156              	.LFE41:
 158              		.section	.text.read,"ax",%progbits
 159              		.align	1
 160              		.global	read
 161              		.syntax unified
 162              		.code	16
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 10


 163              		.thumb_func
 165              	read:
 166              	.LFB42:
 346:Src/main.c    **** 
 347:Src/main.c    **** char read() {
 167              		.loc 1 347 13 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 348:Src/main.c    ****   // Reload CR2 register with the same parameters but set RD_WRN for read operation
 349:Src/main.c    **** 	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0));
 172              		.loc 1 349 2 view .LVU48
 173              		.loc 1 349 6 is_stmt 0 view .LVU49
 174 0000 1B4B     		ldr	r3, .L21
 175 0002 5A68     		ldr	r2, [r3, #4]
 176              		.loc 1 349 12 view .LVU50
 177 0004 1B49     		ldr	r1, .L21+4
 178 0006 0A40     		ands	r2, r1
 179 0008 5A60     		str	r2, [r3, #4]
 350:Src/main.c    **** 	I2C2->CR2 = (0x69 << 1) | (1 << 16) | I2C_CR2_RD_WRN;
 180              		.loc 1 350 2 is_stmt 1 view .LVU51
 181              		.loc 1 350 12 is_stmt 0 view .LVU52
 182 000a 1B4A     		ldr	r2, .L21+8
 183 000c 5A60     		str	r2, [r3, #4]
 351:Src/main.c    **** 	
 352:Src/main.c    ****   // Set the START bit to begin the address frame
 353:Src/main.c    ****   I2C2->CR2 |= I2C_CR2_START;
 184              		.loc 1 353 3 is_stmt 1 view .LVU53
 185              		.loc 1 353 7 is_stmt 0 view .LVU54
 186 000e 5968     		ldr	r1, [r3, #4]
 187              		.loc 1 353 13 view .LVU55
 188 0010 8022     		movs	r2, #128
 189 0012 9201     		lsls	r2, r2, #6
 190 0014 0A43     		orrs	r2, r1
 191 0016 5A60     		str	r2, [r3, #4]
 354:Src/main.c    **** 
 355:Src/main.c    ****   // Wait until either RXNE or NACKF flags are set
 356:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 192              		.loc 1 356 3 is_stmt 1 view .LVU56
 193              		.loc 1 356 9 is_stmt 0 view .LVU57
 194 0018 04E0     		b	.L13
 195              	.L14:
 357:Src/main.c    ****   {
 358:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 196              		.loc 1 358 5 is_stmt 1 view .LVU58
 197              		.loc 1 358 10 is_stmt 0 view .LVU59
 198 001a 184A     		ldr	r2, .L21+12
 199 001c 9369     		ldr	r3, [r2, #24]
 200              		.loc 1 358 17 view .LVU60
 201 001e 4021     		movs	r1, #64
 202 0020 0B43     		orrs	r3, r1
 203 0022 9361     		str	r3, [r2, #24]
 204              	.L13:
 356:Src/main.c    ****   {
 205              		.loc 1 356 10 is_stmt 1 view .LVU61
 356:Src/main.c    ****   {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 11


 206              		.loc 1 356 16 is_stmt 0 view .LVU62
 207 0024 124B     		ldr	r3, .L21
 208 0026 9B69     		ldr	r3, [r3, #24]
 356:Src/main.c    ****   {
 209              		.loc 1 356 22 view .LVU63
 210 0028 1422     		movs	r2, #20
 356:Src/main.c    ****   {
 211              		.loc 1 356 10 view .LVU64
 212 002a 1A42     		tst	r2, r3
 213 002c F5D0     		beq	.L14
 359:Src/main.c    ****     // Handle the error
 360:Src/main.c    ****   }
 361:Src/main.c    **** 
 362:Src/main.c    ****   // Check if NACKF flag is set (slave did not respond)
 363:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF)
 214              		.loc 1 363 3 is_stmt 1 view .LVU65
 215              		.loc 1 363 11 is_stmt 0 view .LVU66
 216 002e 104B     		ldr	r3, .L21
 217 0030 9B69     		ldr	r3, [r3, #24]
 218              		.loc 1 363 6 view .LVU67
 219 0032 DB06     		lsls	r3, r3, #27
 220 0034 04D5     		bpl	.L15
 364:Src/main.c    ****   {
 365:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 221              		.loc 1 365 5 is_stmt 1 view .LVU68
 222              		.loc 1 365 10 is_stmt 0 view .LVU69
 223 0036 114A     		ldr	r2, .L21+12
 224 0038 9369     		ldr	r3, [r2, #24]
 225              		.loc 1 365 17 view .LVU70
 226 003a 4021     		movs	r1, #64
 227 003c 0B43     		orrs	r3, r1
 228 003e 9361     		str	r3, [r2, #24]
 229              	.L15:
 366:Src/main.c    ****     // Handle the error
 367:Src/main.c    ****   }
 368:Src/main.c    **** 
 369:Src/main.c    ****   char val = I2C2->RXDR;
 230              		.loc 1 369 3 is_stmt 1 view .LVU71
 231              		.loc 1 369 18 is_stmt 0 view .LVU72
 232 0040 0B4B     		ldr	r3, .L21
 233 0042 586A     		ldr	r0, [r3, #36]
 234              		.loc 1 369 8 view .LVU73
 235 0044 C0B2     		uxtb	r0, r0
 236              	.LVL1:
 370:Src/main.c    **** 
 371:Src/main.c    ****   // Wait until TC (Transfer Complete) flag is set
 372:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TC | I2C_ISR_NACKF)))
 237              		.loc 1 372 3 is_stmt 1 view .LVU74
 238              		.loc 1 372 9 is_stmt 0 view .LVU75
 239 0046 04E0     		b	.L16
 240              	.L17:
 373:Src/main.c    ****   {
 374:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 241              		.loc 1 374 5 is_stmt 1 view .LVU76
 242              		.loc 1 374 10 is_stmt 0 view .LVU77
 243 0048 0C4A     		ldr	r2, .L21+12
 244 004a 9369     		ldr	r3, [r2, #24]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 12


 245              		.loc 1 374 17 view .LVU78
 246 004c 4021     		movs	r1, #64
 247 004e 0B43     		orrs	r3, r1
 248 0050 9361     		str	r3, [r2, #24]
 249              	.L16:
 372:Src/main.c    ****   {
 250              		.loc 1 372 10 is_stmt 1 view .LVU79
 372:Src/main.c    ****   {
 251              		.loc 1 372 16 is_stmt 0 view .LVU80
 252 0052 074B     		ldr	r3, .L21
 253 0054 9B69     		ldr	r3, [r3, #24]
 372:Src/main.c    ****   {
 254              		.loc 1 372 22 view .LVU81
 255 0056 5022     		movs	r2, #80
 372:Src/main.c    ****   {
 256              		.loc 1 372 10 view .LVU82
 257 0058 1A42     		tst	r2, r3
 258 005a F5D0     		beq	.L17
 375:Src/main.c    ****     // Handle the error
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 259              		.loc 1 378 3 is_stmt 1 view .LVU83
 260              		.loc 1 378 11 is_stmt 0 view .LVU84
 261 005c 044B     		ldr	r3, .L21
 262 005e 9B69     		ldr	r3, [r3, #24]
 263              		.loc 1 378 6 view .LVU85
 264 0060 DB06     		lsls	r3, r3, #27
 265 0062 04D5     		bpl	.L18
 379:Src/main.c    ****   {
 380:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 266              		.loc 1 380 5 is_stmt 1 view .LVU86
 267              		.loc 1 380 10 is_stmt 0 view .LVU87
 268 0064 054A     		ldr	r2, .L21+12
 269 0066 9369     		ldr	r3, [r2, #24]
 270              		.loc 1 380 17 view .LVU88
 271 0068 4021     		movs	r1, #64
 272 006a 0B43     		orrs	r3, r1
 273 006c 9361     		str	r3, [r2, #24]
 274              	.L18:
 381:Src/main.c    ****     // Handle NACK error
 382:Src/main.c    ****   }
 383:Src/main.c    **** 
 384:Src/main.c    **** 	return val;
 275              		.loc 1 384 2 is_stmt 1 view .LVU89
 385:Src/main.c    **** }
 276              		.loc 1 385 1 is_stmt 0 view .LVU90
 277              		@ sp needed
 278 006e 7047     		bx	lr
 279              	.L22:
 280              		.align	2
 281              	.L21:
 282 0070 00580040 		.word	1073764352
 283 0074 00FC80FF 		.word	-8324096
 284 0078 D2040100 		.word	66770
 285 007c 00080048 		.word	1207961600
 286              		.cfi_endproc
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 13


 287              	.LFE42:
 289              		.section	.text.stop,"ax",%progbits
 290              		.align	1
 291              		.global	stop
 292              		.syntax unified
 293              		.code	16
 294              		.thumb_func
 296              	stop:
 297              	.LFB43:
 386:Src/main.c    **** 
 387:Src/main.c    **** void stop() {
 298              		.loc 1 387 13 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 388:Src/main.c    **** 	I2C2->CR2 |= (1 << 14);	// STOP I2C2
 303              		.loc 1 388 2 view .LVU92
 304              		.loc 1 388 6 is_stmt 0 view .LVU93
 305 0000 034A     		ldr	r2, .L24
 306 0002 5168     		ldr	r1, [r2, #4]
 307              		.loc 1 388 12 view .LVU94
 308 0004 8023     		movs	r3, #128
 309 0006 DB01     		lsls	r3, r3, #7
 310 0008 0B43     		orrs	r3, r1
 311 000a 5360     		str	r3, [r2, #4]
 389:Src/main.c    **** }
 312              		.loc 1 389 1 view .LVU95
 313              		@ sp needed
 314 000c 7047     		bx	lr
 315              	.L25:
 316 000e C046     		.align	2
 317              	.L24:
 318 0010 00580040 		.word	1073764352
 319              		.cfi_endproc
 320              	.LFE43:
 322              		.section	.text.readXAxis,"ax",%progbits
 323              		.align	1
 324              		.global	readXAxis
 325              		.syntax unified
 326              		.code	16
 327              		.thumb_func
 329              	readXAxis:
 330              	.LFB44:
 390:Src/main.c    **** 
 391:Src/main.c    **** int16_t readXAxis() {
 331              		.loc 1 391 21 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 10B5     		push	{r4, lr}
 336              	.LCFI0:
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 4, -8
 339              		.cfi_offset 14, -4
 392:Src/main.c    **** 	
 393:Src/main.c    ****   int16_t xAxis = 0;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 14


 340              		.loc 1 393 3 view .LVU97
 341              	.LVL2:
 394:Src/main.c    **** 	write(0xA8);
 342              		.loc 1 394 2 view .LVU98
 343 0002 A820     		movs	r0, #168
 344 0004 FFF7FEFF 		bl	write
 345              	.LVL3:
 395:Src/main.c    **** 	stop();
 346              		.loc 1 395 2 view .LVU99
 347 0008 FFF7FEFF 		bl	stop
 348              	.LVL4:
 396:Src/main.c    **** 
 397:Src/main.c    **** 	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0));
 349              		.loc 1 397 2 view .LVU100
 350              		.loc 1 397 6 is_stmt 0 view .LVU101
 351 000c 274B     		ldr	r3, .L39
 352 000e 5A68     		ldr	r2, [r3, #4]
 353              		.loc 1 397 12 view .LVU102
 354 0010 2749     		ldr	r1, .L39+4
 355 0012 0A40     		ands	r2, r1
 356 0014 5A60     		str	r2, [r3, #4]
 398:Src/main.c    **** 	I2C2->CR2 = (0x69 << 1) | (2 << 16) | I2C_CR2_RD_WRN;
 357              		.loc 1 398 2 is_stmt 1 view .LVU103
 358              		.loc 1 398 12 is_stmt 0 view .LVU104
 359 0016 274A     		ldr	r2, .L39+8
 360 0018 5A60     		str	r2, [r3, #4]
 399:Src/main.c    **** 	
 400:Src/main.c    ****   // Set the START bit to begin the address frame
 401:Src/main.c    ****   I2C2->CR2 |= I2C_CR2_START;
 361              		.loc 1 401 3 is_stmt 1 view .LVU105
 362              		.loc 1 401 7 is_stmt 0 view .LVU106
 363 001a 5968     		ldr	r1, [r3, #4]
 364              		.loc 1 401 13 view .LVU107
 365 001c 8022     		movs	r2, #128
 366 001e 9201     		lsls	r2, r2, #6
 367 0020 0A43     		orrs	r2, r1
 368 0022 5A60     		str	r2, [r3, #4]
 402:Src/main.c    **** 
 403:Src/main.c    ****   // wait for first 8-bit data
 404:Src/main.c    **** 
 405:Src/main.c    ****   // Wait until either RXNE or NACKF flags are set
 406:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 369              		.loc 1 406 3 is_stmt 1 view .LVU108
 370              		.loc 1 406 9 is_stmt 0 view .LVU109
 371 0024 04E0     		b	.L27
 372              	.L28:
 407:Src/main.c    ****   {
 408:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 373              		.loc 1 408 5 is_stmt 1 view .LVU110
 374              		.loc 1 408 10 is_stmt 0 view .LVU111
 375 0026 244A     		ldr	r2, .L39+12
 376 0028 9369     		ldr	r3, [r2, #24]
 377              		.loc 1 408 17 view .LVU112
 378 002a 4021     		movs	r1, #64
 379 002c 0B43     		orrs	r3, r1
 380 002e 9361     		str	r3, [r2, #24]
 381              	.L27:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 15


 406:Src/main.c    ****   {
 382              		.loc 1 406 10 is_stmt 1 view .LVU113
 406:Src/main.c    ****   {
 383              		.loc 1 406 16 is_stmt 0 view .LVU114
 384 0030 1E4B     		ldr	r3, .L39
 385 0032 9B69     		ldr	r3, [r3, #24]
 406:Src/main.c    ****   {
 386              		.loc 1 406 22 view .LVU115
 387 0034 1422     		movs	r2, #20
 406:Src/main.c    ****   {
 388              		.loc 1 406 10 view .LVU116
 389 0036 1A42     		tst	r2, r3
 390 0038 F5D0     		beq	.L28
 409:Src/main.c    ****     // Handle the error
 410:Src/main.c    ****   }
 411:Src/main.c    **** 
 412:Src/main.c    ****   // Check if NACKF flag is set (slave did not respond)
 413:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF)
 391              		.loc 1 413 3 is_stmt 1 view .LVU117
 392              		.loc 1 413 11 is_stmt 0 view .LVU118
 393 003a 1C4B     		ldr	r3, .L39
 394 003c 9B69     		ldr	r3, [r3, #24]
 395              		.loc 1 413 6 view .LVU119
 396 003e DB06     		lsls	r3, r3, #27
 397 0040 04D5     		bpl	.L29
 414:Src/main.c    ****   {
 415:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 398              		.loc 1 415 5 is_stmt 1 view .LVU120
 399              		.loc 1 415 10 is_stmt 0 view .LVU121
 400 0042 1D4A     		ldr	r2, .L39+12
 401 0044 9369     		ldr	r3, [r2, #24]
 402              		.loc 1 415 17 view .LVU122
 403 0046 4021     		movs	r1, #64
 404 0048 0B43     		orrs	r3, r1
 405 004a 9361     		str	r3, [r2, #24]
 406              	.L29:
 416:Src/main.c    ****     // Handle the error
 417:Src/main.c    ****   }
 418:Src/main.c    **** 	
 419:Src/main.c    **** 	xAxis = I2C2->RXDR;
 407              		.loc 1 419 2 is_stmt 1 view .LVU123
 408              		.loc 1 419 14 is_stmt 0 view .LVU124
 409 004c 174B     		ldr	r3, .L39
 410 004e 5C6A     		ldr	r4, [r3, #36]
 411              	.LVL5:
 420:Src/main.c    **** 	
 421:Src/main.c    **** 	// wait for second 8-bit data
 422:Src/main.c    **** 
 423:Src/main.c    ****   // Wait until either RXNE or NACKF flags are set
 424:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 412              		.loc 1 424 3 is_stmt 1 view .LVU125
 413              		.loc 1 424 9 is_stmt 0 view .LVU126
 414 0050 04E0     		b	.L30
 415              	.L31:
 425:Src/main.c    ****   {
 426:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 416              		.loc 1 426 5 is_stmt 1 view .LVU127
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 16


 417              		.loc 1 426 10 is_stmt 0 view .LVU128
 418 0052 194A     		ldr	r2, .L39+12
 419 0054 9369     		ldr	r3, [r2, #24]
 420              		.loc 1 426 17 view .LVU129
 421 0056 4021     		movs	r1, #64
 422 0058 0B43     		orrs	r3, r1
 423 005a 9361     		str	r3, [r2, #24]
 424              	.L30:
 424:Src/main.c    ****   {
 425              		.loc 1 424 10 is_stmt 1 view .LVU130
 424:Src/main.c    ****   {
 426              		.loc 1 424 16 is_stmt 0 view .LVU131
 427 005c 134B     		ldr	r3, .L39
 428 005e 9B69     		ldr	r3, [r3, #24]
 424:Src/main.c    ****   {
 429              		.loc 1 424 22 view .LVU132
 430 0060 1422     		movs	r2, #20
 424:Src/main.c    ****   {
 431              		.loc 1 424 10 view .LVU133
 432 0062 1A42     		tst	r2, r3
 433 0064 F5D0     		beq	.L31
 427:Src/main.c    ****     // Handle the error
 428:Src/main.c    ****   }
 429:Src/main.c    **** 
 430:Src/main.c    ****   // Check if NACKF flag is set (slave did not respond)
 431:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF)
 434              		.loc 1 431 3 is_stmt 1 view .LVU134
 435              		.loc 1 431 11 is_stmt 0 view .LVU135
 436 0066 114B     		ldr	r3, .L39
 437 0068 9B69     		ldr	r3, [r3, #24]
 438              		.loc 1 431 6 view .LVU136
 439 006a DB06     		lsls	r3, r3, #27
 440 006c 04D5     		bpl	.L32
 432:Src/main.c    ****   {
 433:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 441              		.loc 1 433 5 is_stmt 1 view .LVU137
 442              		.loc 1 433 10 is_stmt 0 view .LVU138
 443 006e 124A     		ldr	r2, .L39+12
 444 0070 9369     		ldr	r3, [r2, #24]
 445              		.loc 1 433 17 view .LVU139
 446 0072 4021     		movs	r1, #64
 447 0074 0B43     		orrs	r3, r1
 448 0076 9361     		str	r3, [r2, #24]
 449              	.L32:
 434:Src/main.c    ****     // Handle the error
 435:Src/main.c    ****   }
 436:Src/main.c    **** 
 437:Src/main.c    **** 	xAxis |= (I2C2->RXDR << 8);
 450              		.loc 1 437 2 is_stmt 1 view .LVU140
 451              		.loc 1 437 16 is_stmt 0 view .LVU141
 452 0078 0C4B     		ldr	r3, .L39
 453 007a 586A     		ldr	r0, [r3, #36]
 454              		.loc 1 437 8 view .LVU142
 455 007c 0002     		lsls	r0, r0, #8
 456 007e 2043     		orrs	r0, r4
 457 0080 00B2     		sxth	r0, r0
 458              	.LVL6:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 17


 438:Src/main.c    **** 	
 439:Src/main.c    ****   // Wait until TC (Transfer Complete) flag is set
 440:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TC | I2C_ISR_NACKF)))
 459              		.loc 1 440 3 is_stmt 1 view .LVU143
 460              		.loc 1 440 9 is_stmt 0 view .LVU144
 461 0082 04E0     		b	.L33
 462              	.L34:
 441:Src/main.c    ****   {
 442:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 463              		.loc 1 442 5 is_stmt 1 view .LVU145
 464              		.loc 1 442 10 is_stmt 0 view .LVU146
 465 0084 0C4A     		ldr	r2, .L39+12
 466 0086 9369     		ldr	r3, [r2, #24]
 467              		.loc 1 442 17 view .LVU147
 468 0088 4021     		movs	r1, #64
 469 008a 0B43     		orrs	r3, r1
 470 008c 9361     		str	r3, [r2, #24]
 471              	.L33:
 440:Src/main.c    ****   {
 472              		.loc 1 440 10 is_stmt 1 view .LVU148
 440:Src/main.c    ****   {
 473              		.loc 1 440 16 is_stmt 0 view .LVU149
 474 008e 074B     		ldr	r3, .L39
 475 0090 9B69     		ldr	r3, [r3, #24]
 440:Src/main.c    ****   {
 476              		.loc 1 440 22 view .LVU150
 477 0092 5022     		movs	r2, #80
 440:Src/main.c    ****   {
 478              		.loc 1 440 10 view .LVU151
 479 0094 1A42     		tst	r2, r3
 480 0096 F5D0     		beq	.L34
 443:Src/main.c    ****     // Handle the error
 444:Src/main.c    ****   }
 445:Src/main.c    **** 
 446:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 481              		.loc 1 446 3 is_stmt 1 view .LVU152
 482              		.loc 1 446 11 is_stmt 0 view .LVU153
 483 0098 044B     		ldr	r3, .L39
 484 009a 9B69     		ldr	r3, [r3, #24]
 485              		.loc 1 446 6 view .LVU154
 486 009c DB06     		lsls	r3, r3, #27
 487 009e 04D5     		bpl	.L35
 447:Src/main.c    ****   {
 448:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 488              		.loc 1 448 5 is_stmt 1 view .LVU155
 489              		.loc 1 448 10 is_stmt 0 view .LVU156
 490 00a0 054A     		ldr	r2, .L39+12
 491 00a2 9369     		ldr	r3, [r2, #24]
 492              		.loc 1 448 17 view .LVU157
 493 00a4 4021     		movs	r1, #64
 494 00a6 0B43     		orrs	r3, r1
 495 00a8 9361     		str	r3, [r2, #24]
 496              	.L35:
 449:Src/main.c    ****     // Handle NACK error
 450:Src/main.c    ****   }
 451:Src/main.c    **** 
 452:Src/main.c    **** 	return xAxis;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 18


 497              		.loc 1 452 2 is_stmt 1 view .LVU158
 453:Src/main.c    **** }
 498              		.loc 1 453 1 is_stmt 0 view .LVU159
 499              		@ sp needed
 500 00aa 10BD     		pop	{r4, pc}
 501              	.L40:
 502              		.align	2
 503              	.L39:
 504 00ac 00580040 		.word	1073764352
 505 00b0 00FC80FF 		.word	-8324096
 506 00b4 D2040200 		.word	132306
 507 00b8 00080048 		.word	1207961600
 508              		.cfi_endproc
 509              	.LFE44:
 511              		.section	.text.readYAxis,"ax",%progbits
 512              		.align	1
 513              		.global	readYAxis
 514              		.syntax unified
 515              		.code	16
 516              		.thumb_func
 518              	readYAxis:
 519              	.LFB45:
 454:Src/main.c    **** 
 455:Src/main.c    **** int16_t readYAxis() {
 520              		.loc 1 455 21 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524 0000 10B5     		push	{r4, lr}
 525              	.LCFI1:
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 4, -8
 528              		.cfi_offset 14, -4
 456:Src/main.c    **** 	
 457:Src/main.c    ****   int16_t yAxis = 0;
 529              		.loc 1 457 3 view .LVU161
 530              	.LVL7:
 458:Src/main.c    **** 	write(0xAA);
 531              		.loc 1 458 2 view .LVU162
 532 0002 AA20     		movs	r0, #170
 533 0004 FFF7FEFF 		bl	write
 534              	.LVL8:
 459:Src/main.c    **** 	stop();
 535              		.loc 1 459 2 view .LVU163
 536 0008 FFF7FEFF 		bl	stop
 537              	.LVL9:
 460:Src/main.c    **** 
 461:Src/main.c    **** 	I2C2->CR2 &= ~((0x7F << 16) | (0x3FF << 0));
 538              		.loc 1 461 2 view .LVU164
 539              		.loc 1 461 6 is_stmt 0 view .LVU165
 540 000c 274B     		ldr	r3, .L54
 541 000e 5A68     		ldr	r2, [r3, #4]
 542              		.loc 1 461 12 view .LVU166
 543 0010 2749     		ldr	r1, .L54+4
 544 0012 0A40     		ands	r2, r1
 545 0014 5A60     		str	r2, [r3, #4]
 462:Src/main.c    **** 	I2C2->CR2 = (0x69 << 1) | (2 << 16) | I2C_CR2_RD_WRN;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 19


 546              		.loc 1 462 2 is_stmt 1 view .LVU167
 547              		.loc 1 462 12 is_stmt 0 view .LVU168
 548 0016 274A     		ldr	r2, .L54+8
 549 0018 5A60     		str	r2, [r3, #4]
 463:Src/main.c    **** 
 464:Src/main.c    **** 	// Set the START bit to begin the address frame
 465:Src/main.c    ****   I2C2->CR2 |= I2C_CR2_START;
 550              		.loc 1 465 3 is_stmt 1 view .LVU169
 551              		.loc 1 465 7 is_stmt 0 view .LVU170
 552 001a 5968     		ldr	r1, [r3, #4]
 553              		.loc 1 465 13 view .LVU171
 554 001c 8022     		movs	r2, #128
 555 001e 9201     		lsls	r2, r2, #6
 556 0020 0A43     		orrs	r2, r1
 557 0022 5A60     		str	r2, [r3, #4]
 466:Src/main.c    **** 	
 467:Src/main.c    **** 	// wait for first 8-bit data
 468:Src/main.c    **** 	
 469:Src/main.c    ****   // Wait until either RXNE or NACKF flags are set
 470:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 558              		.loc 1 470 3 is_stmt 1 view .LVU172
 559              		.loc 1 470 9 is_stmt 0 view .LVU173
 560 0024 04E0     		b	.L42
 561              	.L43:
 471:Src/main.c    ****   {
 472:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 562              		.loc 1 472 5 is_stmt 1 view .LVU174
 563              		.loc 1 472 10 is_stmt 0 view .LVU175
 564 0026 244A     		ldr	r2, .L54+12
 565 0028 9369     		ldr	r3, [r2, #24]
 566              		.loc 1 472 17 view .LVU176
 567 002a 4021     		movs	r1, #64
 568 002c 0B43     		orrs	r3, r1
 569 002e 9361     		str	r3, [r2, #24]
 570              	.L42:
 470:Src/main.c    ****   {
 571              		.loc 1 470 10 is_stmt 1 view .LVU177
 470:Src/main.c    ****   {
 572              		.loc 1 470 16 is_stmt 0 view .LVU178
 573 0030 1E4B     		ldr	r3, .L54
 574 0032 9B69     		ldr	r3, [r3, #24]
 470:Src/main.c    ****   {
 575              		.loc 1 470 22 view .LVU179
 576 0034 1422     		movs	r2, #20
 470:Src/main.c    ****   {
 577              		.loc 1 470 10 view .LVU180
 578 0036 1A42     		tst	r2, r3
 579 0038 F5D0     		beq	.L43
 473:Src/main.c    ****     // Handle the error
 474:Src/main.c    ****   }
 475:Src/main.c    **** 
 476:Src/main.c    ****   // Check if NACKF flag is set (slave did not respond)
 477:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF)
 580              		.loc 1 477 3 is_stmt 1 view .LVU181
 581              		.loc 1 477 11 is_stmt 0 view .LVU182
 582 003a 1C4B     		ldr	r3, .L54
 583 003c 9B69     		ldr	r3, [r3, #24]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 20


 584              		.loc 1 477 6 view .LVU183
 585 003e DB06     		lsls	r3, r3, #27
 586 0040 04D5     		bpl	.L44
 478:Src/main.c    ****   {
 479:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 587              		.loc 1 479 5 is_stmt 1 view .LVU184
 588              		.loc 1 479 10 is_stmt 0 view .LVU185
 589 0042 1D4A     		ldr	r2, .L54+12
 590 0044 9369     		ldr	r3, [r2, #24]
 591              		.loc 1 479 17 view .LVU186
 592 0046 4021     		movs	r1, #64
 593 0048 0B43     		orrs	r3, r1
 594 004a 9361     		str	r3, [r2, #24]
 595              	.L44:
 480:Src/main.c    ****     // Handle the error
 481:Src/main.c    ****   }
 482:Src/main.c    **** 	
 483:Src/main.c    **** 	yAxis = I2C2->RXDR;
 596              		.loc 1 483 2 is_stmt 1 view .LVU187
 597              		.loc 1 483 14 is_stmt 0 view .LVU188
 598 004c 174B     		ldr	r3, .L54
 599 004e 5C6A     		ldr	r4, [r3, #36]
 600              	.LVL10:
 484:Src/main.c    **** 	
 485:Src/main.c    **** 	// wait for second 8-bit data
 486:Src/main.c    **** 
 487:Src/main.c    **** 
 488:Src/main.c    ****   // Wait until either RXNE or NACKF flags are set
 489:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_RXNE | I2C_ISR_NACKF)))
 601              		.loc 1 489 3 is_stmt 1 view .LVU189
 602              		.loc 1 489 9 is_stmt 0 view .LVU190
 603 0050 04E0     		b	.L45
 604              	.L46:
 490:Src/main.c    ****   {
 491:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 605              		.loc 1 491 5 is_stmt 1 view .LVU191
 606              		.loc 1 491 10 is_stmt 0 view .LVU192
 607 0052 194A     		ldr	r2, .L54+12
 608 0054 9369     		ldr	r3, [r2, #24]
 609              		.loc 1 491 17 view .LVU193
 610 0056 4021     		movs	r1, #64
 611 0058 0B43     		orrs	r3, r1
 612 005a 9361     		str	r3, [r2, #24]
 613              	.L45:
 489:Src/main.c    ****   {
 614              		.loc 1 489 10 is_stmt 1 view .LVU194
 489:Src/main.c    ****   {
 615              		.loc 1 489 16 is_stmt 0 view .LVU195
 616 005c 134B     		ldr	r3, .L54
 617 005e 9B69     		ldr	r3, [r3, #24]
 489:Src/main.c    ****   {
 618              		.loc 1 489 22 view .LVU196
 619 0060 1422     		movs	r2, #20
 489:Src/main.c    ****   {
 620              		.loc 1 489 10 view .LVU197
 621 0062 1A42     		tst	r2, r3
 622 0064 F5D0     		beq	.L46
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 21


 492:Src/main.c    ****     // Handle the error
 493:Src/main.c    ****   }
 494:Src/main.c    **** 
 495:Src/main.c    ****   // Check if NACKF flag is set (slave did not respond)
 496:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF)
 623              		.loc 1 496 3 is_stmt 1 view .LVU198
 624              		.loc 1 496 11 is_stmt 0 view .LVU199
 625 0066 114B     		ldr	r3, .L54
 626 0068 9B69     		ldr	r3, [r3, #24]
 627              		.loc 1 496 6 view .LVU200
 628 006a DB06     		lsls	r3, r3, #27
 629 006c 04D5     		bpl	.L47
 497:Src/main.c    ****   {
 498:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 630              		.loc 1 498 5 is_stmt 1 view .LVU201
 631              		.loc 1 498 10 is_stmt 0 view .LVU202
 632 006e 124A     		ldr	r2, .L54+12
 633 0070 9369     		ldr	r3, [r2, #24]
 634              		.loc 1 498 17 view .LVU203
 635 0072 4021     		movs	r1, #64
 636 0074 0B43     		orrs	r3, r1
 637 0076 9361     		str	r3, [r2, #24]
 638              	.L47:
 499:Src/main.c    ****     // Handle the error
 500:Src/main.c    ****   }
 501:Src/main.c    **** 
 502:Src/main.c    **** 	yAxis |= (I2C2->RXDR << 8);
 639              		.loc 1 502 2 is_stmt 1 view .LVU204
 640              		.loc 1 502 16 is_stmt 0 view .LVU205
 641 0078 0C4B     		ldr	r3, .L54
 642 007a 586A     		ldr	r0, [r3, #36]
 643              		.loc 1 502 8 view .LVU206
 644 007c 0002     		lsls	r0, r0, #8
 645 007e 2043     		orrs	r0, r4
 646 0080 00B2     		sxth	r0, r0
 647              	.LVL11:
 503:Src/main.c    **** 	
 504:Src/main.c    ****   // Wait until TC (Transfer Complete) flag is set
 505:Src/main.c    ****   while (!(I2C2->ISR & (I2C_ISR_TC | I2C_ISR_NACKF)))
 648              		.loc 1 505 3 is_stmt 1 view .LVU207
 649              		.loc 1 505 9 is_stmt 0 view .LVU208
 650 0082 04E0     		b	.L48
 651              	.L49:
 506:Src/main.c    ****   {
 507:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 652              		.loc 1 507 5 is_stmt 1 view .LVU209
 653              		.loc 1 507 10 is_stmt 0 view .LVU210
 654 0084 0C4A     		ldr	r2, .L54+12
 655 0086 9369     		ldr	r3, [r2, #24]
 656              		.loc 1 507 17 view .LVU211
 657 0088 4021     		movs	r1, #64
 658 008a 0B43     		orrs	r3, r1
 659 008c 9361     		str	r3, [r2, #24]
 660              	.L48:
 505:Src/main.c    ****   {
 661              		.loc 1 505 10 is_stmt 1 view .LVU212
 505:Src/main.c    ****   {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 22


 662              		.loc 1 505 16 is_stmt 0 view .LVU213
 663 008e 074B     		ldr	r3, .L54
 664 0090 9B69     		ldr	r3, [r3, #24]
 505:Src/main.c    ****   {
 665              		.loc 1 505 22 view .LVU214
 666 0092 5022     		movs	r2, #80
 505:Src/main.c    ****   {
 667              		.loc 1 505 10 view .LVU215
 668 0094 1A42     		tst	r2, r3
 669 0096 F5D0     		beq	.L49
 508:Src/main.c    ****     // Handle the error
 509:Src/main.c    ****   }
 510:Src/main.c    **** 
 511:Src/main.c    ****   if (I2C2->ISR & I2C_ISR_NACKF) 
 670              		.loc 1 511 3 is_stmt 1 view .LVU216
 671              		.loc 1 511 11 is_stmt 0 view .LVU217
 672 0098 044B     		ldr	r3, .L54
 673 009a 9B69     		ldr	r3, [r3, #24]
 674              		.loc 1 511 6 view .LVU218
 675 009c DB06     		lsls	r3, r3, #27
 676 009e 04D5     		bpl	.L50
 512:Src/main.c    ****   {
 513:Src/main.c    ****     GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED
 677              		.loc 1 513 5 is_stmt 1 view .LVU219
 678              		.loc 1 513 10 is_stmt 0 view .LVU220
 679 00a0 054A     		ldr	r2, .L54+12
 680 00a2 9369     		ldr	r3, [r2, #24]
 681              		.loc 1 513 17 view .LVU221
 682 00a4 4021     		movs	r1, #64
 683 00a6 0B43     		orrs	r3, r1
 684 00a8 9361     		str	r3, [r2, #24]
 685              	.L50:
 514:Src/main.c    ****     // Handle NACK error
 515:Src/main.c    ****   }
 516:Src/main.c    **** 
 517:Src/main.c    **** 	return yAxis;
 686              		.loc 1 517 2 is_stmt 1 view .LVU222
 518:Src/main.c    **** }
 687              		.loc 1 518 1 is_stmt 0 view .LVU223
 688              		@ sp needed
 689 00aa 10BD     		pop	{r4, pc}
 690              	.L55:
 691              		.align	2
 692              	.L54:
 693 00ac 00580040 		.word	1073764352
 694 00b0 00FC80FF 		.word	-8324096
 695 00b4 D2040200 		.word	132306
 696 00b8 00080048 		.word	1207961600
 697              		.cfi_endproc
 698              	.LFE45:
 700              		.section	.text._Error_Handler,"ax",%progbits
 701              		.align	1
 702              		.global	_Error_Handler
 703              		.syntax unified
 704              		.code	16
 705              		.thumb_func
 707              	_Error_Handler:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 23


 708              	.LFB47:
 519:Src/main.c    **** 
 520:Src/main.c    **** /** System Clock Configuration
 521:Src/main.c    **** */
 522:Src/main.c    **** void SystemClock_Config(void)
 523:Src/main.c    **** {
 524:Src/main.c    **** 
 525:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 526:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 527:Src/main.c    **** 
 528:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 529:Src/main.c    ****     */
 530:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 531:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 532:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 533:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 534:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 535:Src/main.c    ****   {
 536:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 537:Src/main.c    ****   }
 538:Src/main.c    **** 
 539:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 540:Src/main.c    ****     */
 541:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 542:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 543:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 544:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 545:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 546:Src/main.c    **** 
 547:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 548:Src/main.c    ****   {
 549:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 550:Src/main.c    ****   }
 551:Src/main.c    **** 
 552:Src/main.c    ****     /**Configure the Systick interrupt time
 553:Src/main.c    ****     */
 554:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 555:Src/main.c    **** 
 556:Src/main.c    ****     /**Configure the Systick
 557:Src/main.c    ****     */
 558:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 559:Src/main.c    **** 
 560:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 561:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /* USER CODE BEGIN 4 */
 565:Src/main.c    **** 
 566:Src/main.c    **** /* USER CODE END 4 */
 567:Src/main.c    **** 
 568:Src/main.c    **** /**
 569:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 570:Src/main.c    ****   * @param  None
 571:Src/main.c    ****   * @retval None
 572:Src/main.c    ****   */
 573:Src/main.c    **** void _Error_Handler(char * file, int line)
 574:Src/main.c    **** {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 24


 709              		.loc 1 574 1 is_stmt 1 view -0
 710              		.cfi_startproc
 711              		@ Volatile: function does not return.
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715              	.LVL12:
 716              	.L57:
 575:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 576:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 577:Src/main.c    ****   while(1)
 717              		.loc 1 577 3 view .LVU225
 578:Src/main.c    ****   {
 579:Src/main.c    ****   }
 718              		.loc 1 579 3 view .LVU226
 577:Src/main.c    ****   {
 719              		.loc 1 577 8 view .LVU227
 720 0000 FEE7     		b	.L57
 721              		.cfi_endproc
 722              	.LFE47:
 724              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 725              		.align	2
 726              	.LC0:
 727 0000 5372632F 		.ascii	"Src/main.c\000"
 727      6D61696E 
 727      2E6300
 728              		.global	__aeabi_uidiv
 729              		.section	.text.SystemClock_Config,"ax",%progbits
 730              		.align	1
 731              		.global	SystemClock_Config
 732              		.syntax unified
 733              		.code	16
 734              		.thumb_func
 736              	SystemClock_Config:
 737              	.LFB46:
 523:Src/main.c    **** 
 738              		.loc 1 523 1 view -0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 72
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742 0000 00B5     		push	{lr}
 743              	.LCFI2:
 744              		.cfi_def_cfa_offset 4
 745              		.cfi_offset 14, -4
 746 0002 93B0     		sub	sp, sp, #76
 747              	.LCFI3:
 748              		.cfi_def_cfa_offset 80
 525:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 749              		.loc 1 525 3 view .LVU229
 526:Src/main.c    **** 
 750              		.loc 1 526 3 view .LVU230
 530:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 751              		.loc 1 530 3 view .LVU231
 530:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 752              		.loc 1 530 36 is_stmt 0 view .LVU232
 753 0004 0223     		movs	r3, #2
 754 0006 0593     		str	r3, [sp, #20]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 25


 531:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 755              		.loc 1 531 3 is_stmt 1 view .LVU233
 531:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 756              		.loc 1 531 30 is_stmt 0 view .LVU234
 757 0008 013B     		subs	r3, r3, #1
 758 000a 0893     		str	r3, [sp, #32]
 532:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 759              		.loc 1 532 3 is_stmt 1 view .LVU235
 532:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 760              		.loc 1 532 41 is_stmt 0 view .LVU236
 761 000c 0F33     		adds	r3, r3, #15
 762 000e 0993     		str	r3, [sp, #36]
 533:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 763              		.loc 1 533 3 is_stmt 1 view .LVU237
 533:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 764              		.loc 1 533 34 is_stmt 0 view .LVU238
 765 0010 0023     		movs	r3, #0
 766 0012 0E93     		str	r3, [sp, #56]
 534:Src/main.c    ****   {
 767              		.loc 1 534 3 is_stmt 1 view .LVU239
 534:Src/main.c    ****   {
 768              		.loc 1 534 7 is_stmt 0 view .LVU240
 769 0014 05A8     		add	r0, sp, #20
 770 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 771              	.LVL13:
 534:Src/main.c    ****   {
 772              		.loc 1 534 6 discriminator 1 view .LVU241
 773 001a 0028     		cmp	r0, #0
 774 001c 1ED1     		bne	.L61
 541:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 775              		.loc 1 541 3 is_stmt 1 view .LVU242
 541:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 776              		.loc 1 541 31 is_stmt 0 view .LVU243
 777 001e 0723     		movs	r3, #7
 778 0020 0193     		str	r3, [sp, #4]
 543:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 779              		.loc 1 543 3 is_stmt 1 view .LVU244
 543:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 780              		.loc 1 543 34 is_stmt 0 view .LVU245
 781 0022 0023     		movs	r3, #0
 782 0024 0293     		str	r3, [sp, #8]
 544:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 783              		.loc 1 544 3 is_stmt 1 view .LVU246
 544:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 784              		.loc 1 544 35 is_stmt 0 view .LVU247
 785 0026 0393     		str	r3, [sp, #12]
 545:Src/main.c    **** 
 786              		.loc 1 545 3 is_stmt 1 view .LVU248
 545:Src/main.c    **** 
 787              		.loc 1 545 36 is_stmt 0 view .LVU249
 788 0028 0493     		str	r3, [sp, #16]
 547:Src/main.c    ****   {
 789              		.loc 1 547 3 is_stmt 1 view .LVU250
 547:Src/main.c    ****   {
 790              		.loc 1 547 7 is_stmt 0 view .LVU251
 791 002a 0021     		movs	r1, #0
 792 002c 01A8     		add	r0, sp, #4
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 26


 793 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 794              	.LVL14:
 547:Src/main.c    ****   {
 795              		.loc 1 547 6 discriminator 1 view .LVU252
 796 0032 0028     		cmp	r0, #0
 797 0034 17D1     		bne	.L62
 554:Src/main.c    **** 
 798              		.loc 1 554 3 is_stmt 1 view .LVU253
 554:Src/main.c    **** 
 799              		.loc 1 554 22 is_stmt 0 view .LVU254
 800 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 801              	.LVL15:
 554:Src/main.c    **** 
 802              		.loc 1 554 3 discriminator 1 view .LVU255
 803 003a FA21     		movs	r1, #250
 804 003c 8900     		lsls	r1, r1, #2
 805 003e FFF7FEFF 		bl	__aeabi_uidiv
 806              	.LVL16:
 807 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 808              	.LVL17:
 558:Src/main.c    **** 
 809              		.loc 1 558 3 is_stmt 1 view .LVU256
 810 0046 0420     		movs	r0, #4
 811 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 812              	.LVL18:
 561:Src/main.c    **** }
 813              		.loc 1 561 3 view .LVU257
 814 004c 0120     		movs	r0, #1
 815 004e 0022     		movs	r2, #0
 816 0050 0021     		movs	r1, #0
 817 0052 4042     		rsbs	r0, r0, #0
 818 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 819              	.LVL19:
 562:Src/main.c    **** 
 820              		.loc 1 562 1 is_stmt 0 view .LVU258
 821 0058 13B0     		add	sp, sp, #76
 822              		@ sp needed
 823 005a 00BD     		pop	{pc}
 824              	.L61:
 536:Src/main.c    ****   }
 825              		.loc 1 536 5 is_stmt 1 view .LVU259
 826 005c 8621     		movs	r1, #134
 827 005e 0448     		ldr	r0, .L63
 828 0060 8900     		lsls	r1, r1, #2
 829 0062 FFF7FEFF 		bl	_Error_Handler
 830              	.LVL20:
 831              	.L62:
 549:Src/main.c    ****   }
 832              		.loc 1 549 5 view .LVU260
 833 0066 0248     		ldr	r0, .L63
 834 0068 0249     		ldr	r1, .L63+4
 835 006a FFF7FEFF 		bl	_Error_Handler
 836              	.LVL21:
 837              	.L64:
 838 006e C046     		.align	2
 839              	.L63:
 840 0070 00000000 		.word	.LC0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 27


 841 0074 25020000 		.word	549
 842              		.cfi_endproc
 843              	.LFE46:
 845              		.section	.text.main,"ax",%progbits
 846              		.align	1
 847              		.global	main
 848              		.syntax unified
 849              		.code	16
 850              		.thumb_func
 852              	main:
 853              	.LFB40:
  78:Src/main.c    ****   HAL_Init();               // Reset of all peripherals, init the Flash and Systick
 854              		.loc 1 78 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 56
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 859              	.LCFI4:
 860              		.cfi_def_cfa_offset 20
 861              		.cfi_offset 4, -20
 862              		.cfi_offset 5, -16
 863              		.cfi_offset 6, -12
 864              		.cfi_offset 7, -8
 865              		.cfi_offset 14, -4
 866 0002 8FB0     		sub	sp, sp, #60
 867              	.LCFI5:
 868              		.cfi_def_cfa_offset 80
  79:Src/main.c    ****   SystemClock_Config();     // Configure the system clock
 869              		.loc 1 79 3 view .LVU262
 870 0004 FFF7FEFF 		bl	HAL_Init
 871              	.LVL22:
  80:Src/main.c    **** 
 872              		.loc 1 80 3 view .LVU263
 873 0008 FFF7FEFF 		bl	SystemClock_Config
 874              	.LVL23:
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 875              		.loc 1 82 3 view .LVU264
 876              	.LBB2:
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 877              		.loc 1 82 3 view .LVU265
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 878              		.loc 1 82 3 view .LVU266
 879 000c A04C     		ldr	r4, .L89
 880 000e 6369     		ldr	r3, [r4, #20]
 881 0010 8022     		movs	r2, #128
 882 0012 D202     		lsls	r2, r2, #11
 883 0014 1343     		orrs	r3, r2
 884 0016 6361     		str	r3, [r4, #20]
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 885              		.loc 1 82 3 view .LVU267
 886 0018 6369     		ldr	r3, [r4, #20]
 887 001a 1340     		ands	r3, r2
 888 001c 0193     		str	r3, [sp, #4]
  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 889              		.loc 1 82 3 view .LVU268
 890 001e 019B     		ldr	r3, [sp, #4]
 891              	.LBE2:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 28


  82:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
 892              		.loc 1 82 3 view .LVU269
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 893              		.loc 1 83 3 view .LVU270
 894              	.LBB3:
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 895              		.loc 1 83 3 view .LVU271
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 896              		.loc 1 83 3 view .LVU272
 897 0020 6369     		ldr	r3, [r4, #20]
 898 0022 8022     		movs	r2, #128
 899 0024 1203     		lsls	r2, r2, #12
 900 0026 1343     		orrs	r3, r2
 901 0028 6361     		str	r3, [r4, #20]
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 902              		.loc 1 83 3 view .LVU273
 903 002a 6369     		ldr	r3, [r4, #20]
 904 002c 1340     		ands	r3, r2
 905 002e 0293     		str	r3, [sp, #8]
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 906              		.loc 1 83 3 view .LVU274
 907 0030 029B     		ldr	r3, [sp, #8]
 908              	.LBE3:
  83:Src/main.c    ****   __HAL_RCC_I2C1_CLK_ENABLE(); // Enable the I2C2 clock
 909              		.loc 1 83 3 view .LVU275
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 910              		.loc 1 84 3 view .LVU276
 911              	.LBB4:
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 912              		.loc 1 84 3 view .LVU277
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 913              		.loc 1 84 3 view .LVU278
 914 0032 E369     		ldr	r3, [r4, #28]
 915 0034 8022     		movs	r2, #128
 916 0036 9203     		lsls	r2, r2, #14
 917 0038 1343     		orrs	r3, r2
 918 003a E361     		str	r3, [r4, #28]
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 919              		.loc 1 84 3 view .LVU279
 920 003c E369     		ldr	r3, [r4, #28]
 921 003e 1340     		ands	r3, r2
 922 0040 0393     		str	r3, [sp, #12]
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 923              		.loc 1 84 3 view .LVU280
 924 0042 039B     		ldr	r3, [sp, #12]
 925              	.LBE4:
  84:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (GPIOC w/out PC0) -- LEDs
 926              		.loc 1 84 3 view .LVU281
  86:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
 927              		.loc 1 86 3 view .LVU282
  86:Src/main.c    ****                               GPIO_MODE_OUTPUT_PP,
 928              		.loc 1 86 20 is_stmt 0 view .LVU283
 929 0044 1422     		movs	r2, #20
 930 0046 0021     		movs	r1, #0
 931 0048 09A8     		add	r0, sp, #36
 932 004a FFF7FEFF 		bl	memset
 933              	.LVL24:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 29


 934 004e F023     		movs	r3, #240
 935 0050 9B00     		lsls	r3, r3, #2
 936 0052 0993     		str	r3, [sp, #36]
 937 0054 0126     		movs	r6, #1
 938 0056 0A96     		str	r6, [sp, #40]
  90:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC6,7,8 & PC9 (LEDs)
 939              		.loc 1 90 3 is_stmt 1 view .LVU284
  90:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC6,7,8 & PC9 (LEDs)
 940              		.loc 1 90 20 is_stmt 0 view .LVU285
 941 0058 1422     		movs	r2, #20
 942 005a 0021     		movs	r1, #0
 943 005c 04A8     		add	r0, sp, #16
 944 005e FFF7FEFF 		bl	memset
 945              	.LVL25:
 946 0062 8C4B     		ldr	r3, .L89+4
 947 0064 0493     		str	r3, [sp, #16]
  91:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &initStr_PC0); // Initialize pins PC0
 948              		.loc 1 91 3 is_stmt 1 view .LVU286
 949 0066 8C4D     		ldr	r5, .L89+8
 950 0068 09A9     		add	r1, sp, #36
 951 006a 2800     		movs	r0, r5
 952 006c FFF7FEFF 		bl	HAL_GPIO_Init
 953              	.LVL26:
  92:Src/main.c    ****   // Set up a configuration struct to pass to the initialization function (PB0)
 954              		.loc 1 92 3 view .LVU287
 955 0070 04A9     		add	r1, sp, #16
 956 0072 2800     		movs	r0, r5
 957 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 958              	.LVL27:
  97:Src/main.c    ****   GPIOB->OTYPER |= (1 << 11); // PB11 to open-drain output (1)
 959              		.loc 1 97 3 view .LVU288
  97:Src/main.c    ****   GPIOB->OTYPER |= (1 << 11); // PB11 to open-drain output (1)
 960              		.loc 1 97 8 is_stmt 0 view .LVU289
 961 0078 884B     		ldr	r3, .L89+12
 962 007a 1968     		ldr	r1, [r3]
  97:Src/main.c    ****   GPIOB->OTYPER |= (1 << 11); // PB11 to open-drain output (1)
 963              		.loc 1 97 16 view .LVU290
 964 007c 8022     		movs	r2, #128
 965 007e 1204     		lsls	r2, r2, #16
 966 0080 0A43     		orrs	r2, r1
 967 0082 1A60     		str	r2, [r3]
  98:Src/main.c    ****   GPIOB ->AFR[1] |= (1 << 12); // Set it to AF1 (0001)
 968              		.loc 1 98 3 is_stmt 1 view .LVU291
  98:Src/main.c    ****   GPIOB ->AFR[1] |= (1 << 12); // Set it to AF1 (0001)
 969              		.loc 1 98 8 is_stmt 0 view .LVU292
 970 0084 5968     		ldr	r1, [r3, #4]
  98:Src/main.c    ****   GPIOB ->AFR[1] |= (1 << 12); // Set it to AF1 (0001)
 971              		.loc 1 98 17 view .LVU293
 972 0086 8022     		movs	r2, #128
 973 0088 1201     		lsls	r2, r2, #4
 974 008a 0A43     		orrs	r2, r1
 975 008c 5A60     		str	r2, [r3, #4]
  99:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 <<13) | ~(1 <<14) | ~(1 << 15); // Set it to AF1 (0001)  
 976              		.loc 1 99 3 is_stmt 1 view .LVU294
  99:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 <<13) | ~(1 <<14) | ~(1 << 15); // Set it to AF1 (0001)  
 977              		.loc 1 99 14 is_stmt 0 view .LVU295
 978 008e 596A     		ldr	r1, [r3, #36]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 30


  99:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 <<13) | ~(1 <<14) | ~(1 << 15); // Set it to AF1 (0001)  
 979              		.loc 1 99 18 view .LVU296
 980 0090 8022     		movs	r2, #128
 981 0092 5201     		lsls	r2, r2, #5
 982 0094 0A43     		orrs	r2, r1
 983 0096 5A62     		str	r2, [r3, #36]
 100:Src/main.c    **** 
 984              		.loc 1 100 3 is_stmt 1 view .LVU297
 100:Src/main.c    **** 
 985              		.loc 1 100 13 is_stmt 0 view .LVU298
 986 0098 5A6A     		ldr	r2, [r3, #36]
 100:Src/main.c    **** 
 987              		.loc 1 100 17 view .LVU299
 988 009a 5A62     		str	r2, [r3, #36]
 103:Src/main.c    ****   GPIOB->OTYPER |= (1 << 13); // PB13 to open-drain output(1)
 989              		.loc 1 103 3 is_stmt 1 view .LVU300
 103:Src/main.c    ****   GPIOB->OTYPER |= (1 << 13); // PB13 to open-drain output(1)
 990              		.loc 1 103 8 is_stmt 0 view .LVU301
 991 009c 1968     		ldr	r1, [r3]
 103:Src/main.c    ****   GPIOB->OTYPER |= (1 << 13); // PB13 to open-drain output(1)
 992              		.loc 1 103 16 view .LVU302
 993 009e 8022     		movs	r2, #128
 994 00a0 1205     		lsls	r2, r2, #20
 995 00a2 0A43     		orrs	r2, r1
 996 00a4 1A60     		str	r2, [r3]
 104:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 << 21) | ~(1 << 23); // Set it to AF5 (0101)
 997              		.loc 1 104 3 is_stmt 1 view .LVU303
 104:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 << 21) | ~(1 << 23); // Set it to AF5 (0101)
 998              		.loc 1 104 8 is_stmt 0 view .LVU304
 999 00a6 5A68     		ldr	r2, [r3, #4]
 104:Src/main.c    ****   GPIOB->AFR[1] &= ~(1 << 21) | ~(1 << 23); // Set it to AF5 (0101)
 1000              		.loc 1 104 17 view .LVU305
 1001 00a8 8027     		movs	r7, #128
 1002 00aa BF01     		lsls	r7, r7, #6
 1003 00ac 3A43     		orrs	r2, r7
 1004 00ae 5A60     		str	r2, [r3, #4]
 105:Src/main.c    ****   GPIOB->AFR[1] |= (1 << 20) | (1 << 22); // Set it to AF5 (0101)
 1005              		.loc 1 105 3 is_stmt 1 view .LVU306
 105:Src/main.c    ****   GPIOB->AFR[1] |= (1 << 20) | (1 << 22); // Set it to AF5 (0101)
 1006              		.loc 1 105 13 is_stmt 0 view .LVU307
 1007 00b0 5A6A     		ldr	r2, [r3, #36]
 105:Src/main.c    ****   GPIOB->AFR[1] |= (1 << 20) | (1 << 22); // Set it to AF5 (0101)
 1008              		.loc 1 105 17 view .LVU308
 1009 00b2 5A62     		str	r2, [r3, #36]
 106:Src/main.c    **** 
 1010              		.loc 1 106 3 is_stmt 1 view .LVU309
 106:Src/main.c    **** 
 1011              		.loc 1 106 13 is_stmt 0 view .LVU310
 1012 00b4 596A     		ldr	r1, [r3, #36]
 106:Src/main.c    **** 
 1013              		.loc 1 106 17 view .LVU311
 1014 00b6 A022     		movs	r2, #160
 1015 00b8 D203     		lsls	r2, r2, #15
 1016 00ba 0A43     		orrs	r2, r1
 1017 00bc 5A62     		str	r2, [r3, #36]
 109:Src/main.c    ****   GPIOB->OTYPER &= ~(1 << 14); // PB14 to push-pull output type (clear)   
 1018              		.loc 1 109 3 is_stmt 1 view .LVU312
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 31


 109:Src/main.c    ****   GPIOB->OTYPER &= ~(1 << 14); // PB14 to push-pull output type (clear)   
 1019              		.loc 1 109 8 is_stmt 0 view .LVU313
 1020 00be 1968     		ldr	r1, [r3]
 109:Src/main.c    ****   GPIOB->OTYPER &= ~(1 << 14); // PB14 to push-pull output type (clear)   
 1021              		.loc 1 109 16 view .LVU314
 1022 00c0 8022     		movs	r2, #128
 1023 00c2 5205     		lsls	r2, r2, #21
 1024 00c4 1143     		orrs	r1, r2
 1025 00c6 1960     		str	r1, [r3]
 110:Src/main.c    ****   GPIOB->ODR |= (1 << 14); // PB14 pin high                            
 1026              		.loc 1 110 3 is_stmt 1 view .LVU315
 110:Src/main.c    ****   GPIOB->ODR |= (1 << 14); // PB14 pin high                            
 1027              		.loc 1 110 8 is_stmt 0 view .LVU316
 1028 00c8 5968     		ldr	r1, [r3, #4]
 110:Src/main.c    ****   GPIOB->ODR |= (1 << 14); // PB14 pin high                            
 1029              		.loc 1 110 17 view .LVU317
 1030 00ca 7548     		ldr	r0, .L89+16
 1031 00cc 0140     		ands	r1, r0
 1032 00ce 5960     		str	r1, [r3, #4]
 111:Src/main.c    **** 
 1033              		.loc 1 111 3 is_stmt 1 view .LVU318
 111:Src/main.c    **** 
 1034              		.loc 1 111 8 is_stmt 0 view .LVU319
 1035 00d0 5869     		ldr	r0, [r3, #20]
 111:Src/main.c    **** 
 1036              		.loc 1 111 14 view .LVU320
 1037 00d2 8021     		movs	r1, #128
 1038 00d4 C901     		lsls	r1, r1, #7
 1039 00d6 0143     		orrs	r1, r0
 1040 00d8 5961     		str	r1, [r3, #20]
 114:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 0); // PC0 to push-pull output type (clear)     
 1041              		.loc 1 114 3 is_stmt 1 view .LVU321
 114:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 0); // PC0 to push-pull output type (clear)     
 1042              		.loc 1 114 8 is_stmt 0 view .LVU322
 1043 00da 2B68     		ldr	r3, [r5]
 114:Src/main.c    ****   GPIOC->OTYPER &= ~(1 << 0); // PC0 to push-pull output type (clear)     
 1044              		.loc 1 114 16 view .LVU323
 1045 00dc 3343     		orrs	r3, r6
 1046 00de 2B60     		str	r3, [r5]
 115:Src/main.c    ****   GPIOC->ODR |= (1<< 0); // PC0 pin high, I2C mode on (make sure this is working, maybe that is the
 1047              		.loc 1 115 3 is_stmt 1 view .LVU324
 115:Src/main.c    ****   GPIOC->ODR |= (1<< 0); // PC0 pin high, I2C mode on (make sure this is working, maybe that is the
 1048              		.loc 1 115 8 is_stmt 0 view .LVU325
 1049 00e0 6B68     		ldr	r3, [r5, #4]
 115:Src/main.c    ****   GPIOC->ODR |= (1<< 0); // PC0 pin high, I2C mode on (make sure this is working, maybe that is the
 1050              		.loc 1 115 17 view .LVU326
 1051 00e2 B343     		bics	r3, r6
 1052 00e4 6B60     		str	r3, [r5, #4]
 116:Src/main.c    **** 
 1053              		.loc 1 116 3 is_stmt 1 view .LVU327
 116:Src/main.c    **** 
 1054              		.loc 1 116 8 is_stmt 0 view .LVU328
 1055 00e6 6B69     		ldr	r3, [r5, #20]
 116:Src/main.c    **** 
 1056              		.loc 1 116 14 view .LVU329
 1057 00e8 3343     		orrs	r3, r6
 1058 00ea 6B61     		str	r3, [r5, #20]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 32


 119:Src/main.c    **** 
 1059              		.loc 1 119 3 is_stmt 1 view .LVU330
 119:Src/main.c    **** 
 1060              		.loc 1 119 6 is_stmt 0 view .LVU331
 1061 00ec E369     		ldr	r3, [r4, #28]
 119:Src/main.c    **** 
 1062              		.loc 1 119 16 view .LVU332
 1063 00ee 8021     		movs	r1, #128
 1064 00f0 C903     		lsls	r1, r1, #15
 1065 00f2 0B43     		orrs	r3, r1
 1066 00f4 E361     		str	r3, [r4, #28]
 122:Src/main.c    ****   I2C2->TIMINGR = (0x13 << 0);
 1067              		.loc 1 122 3 is_stmt 1 view .LVU333
 122:Src/main.c    ****   I2C2->TIMINGR = (0x13 << 0);
 1068              		.loc 1 122 17 is_stmt 0 view .LVU334
 1069 00f6 6B4C     		ldr	r4, .L89+20
 1070 00f8 2261     		str	r2, [r4, #16]
 123:Src/main.c    ****   I2C2->TIMINGR = (0xF << 8);
 1071              		.loc 1 123 3 is_stmt 1 view .LVU335
 123:Src/main.c    ****   I2C2->TIMINGR = (0xF << 8);
 1072              		.loc 1 123 17 is_stmt 0 view .LVU336
 1073 00fa 1323     		movs	r3, #19
 1074 00fc 2361     		str	r3, [r4, #16]
 124:Src/main.c    ****   I2C2->TIMINGR = (0x2 << 16);
 1075              		.loc 1 124 3 is_stmt 1 view .LVU337
 124:Src/main.c    ****   I2C2->TIMINGR = (0x2 << 16);
 1076              		.loc 1 124 17 is_stmt 0 view .LVU338
 1077 00fe F023     		movs	r3, #240
 1078 0100 1B01     		lsls	r3, r3, #4
 1079 0102 2361     		str	r3, [r4, #16]
 125:Src/main.c    ****   I2C2->TIMINGR = (0x4 << 20); 
 1080              		.loc 1 125 3 is_stmt 1 view .LVU339
 125:Src/main.c    ****   I2C2->TIMINGR = (0x4 << 20); 
 1081              		.loc 1 125 17 is_stmt 0 view .LVU340
 1082 0104 8023     		movs	r3, #128
 1083 0106 9B02     		lsls	r3, r3, #10
 1084 0108 2361     		str	r3, [r4, #16]
 126:Src/main.c    **** 
 1085              		.loc 1 126 3 is_stmt 1 view .LVU341
 126:Src/main.c    **** 
 1086              		.loc 1 126 17 is_stmt 0 view .LVU342
 1087 010a 2161     		str	r1, [r4, #16]
 129:Src/main.c    **** 
 1088              		.loc 1 129 3 is_stmt 1 view .LVU343
 129:Src/main.c    **** 
 1089              		.loc 1 129 7 is_stmt 0 view .LVU344
 1090 010c 2368     		ldr	r3, [r4]
 129:Src/main.c    **** 
 1091              		.loc 1 129 13 view .LVU345
 1092 010e 3343     		orrs	r3, r6
 1093 0110 2360     		str	r3, [r4]
 199:Src/main.c    **** 
 1094              		.loc 1 199 3 is_stmt 1 view .LVU346
 1095 0112 2020     		movs	r0, #32
 1096 0114 FFF7FEFF 		bl	write
 1097              	.LVL28:
 202:Src/main.c    **** 	I2C2->CR2 &= ~(1 << 10); 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 33


 1098              		.loc 1 202 3 view .LVU347
 202:Src/main.c    **** 	I2C2->CR2 &= ~(1 << 10); 
 1099              		.loc 1 202 7 is_stmt 0 view .LVU348
 1100 0118 6368     		ldr	r3, [r4, #4]
 202:Src/main.c    **** 	I2C2->CR2 &= ~(1 << 10); 
 1101              		.loc 1 202 13 view .LVU349
 1102 011a 634A     		ldr	r2, .L89+24
 1103 011c 1340     		ands	r3, r2
 1104 011e 6360     		str	r3, [r4, #4]
 203:Src/main.c    ****   I2C2->CR2 |= (0x69 << 1) | (2 << 16); // Addressing the gyroscope
 1105              		.loc 1 203 2 is_stmt 1 view .LVU350
 203:Src/main.c    ****   I2C2->CR2 |= (0x69 << 1) | (2 << 16); // Addressing the gyroscope
 1106              		.loc 1 203 6 is_stmt 0 view .LVU351
 1107 0120 6368     		ldr	r3, [r4, #4]
 203:Src/main.c    ****   I2C2->CR2 |= (0x69 << 1) | (2 << 16); // Addressing the gyroscope
 1108              		.loc 1 203 12 view .LVU352
 1109 0122 624A     		ldr	r2, .L89+28
 1110 0124 1340     		ands	r3, r2
 1111 0126 6360     		str	r3, [r4, #4]
 204:Src/main.c    **** 
 1112              		.loc 1 204 3 is_stmt 1 view .LVU353
 204:Src/main.c    **** 
 1113              		.loc 1 204 7 is_stmt 0 view .LVU354
 1114 0128 6268     		ldr	r2, [r4, #4]
 204:Src/main.c    **** 
 1115              		.loc 1 204 13 view .LVU355
 1116 012a 614B     		ldr	r3, .L89+32
 1117 012c 1343     		orrs	r3, r2
 1118 012e 6360     		str	r3, [r4, #4]
 207:Src/main.c    **** 
 1119              		.loc 1 207 3 is_stmt 1 view .LVU356
 207:Src/main.c    **** 
 1120              		.loc 1 207 7 is_stmt 0 view .LVU357
 1121 0130 6368     		ldr	r3, [r4, #4]
 207:Src/main.c    **** 
 1122              		.loc 1 207 13 view .LVU358
 1123 0132 1F43     		orrs	r7, r3
 1124 0134 6760     		str	r7, [r4, #4]
 209:Src/main.c    ****   {
 1125              		.loc 1 209 3 is_stmt 1 view .LVU359
 209:Src/main.c    ****   {
 1126              		.loc 1 209 9 is_stmt 0 view .LVU360
 1127 0136 04E0     		b	.L66
 1128              	.L67:
 211:Src/main.c    ****     // Handle the error
 1129              		.loc 1 211 5 is_stmt 1 view .LVU361
 211:Src/main.c    ****     // Handle the error
 1130              		.loc 1 211 10 is_stmt 0 view .LVU362
 1131 0138 574A     		ldr	r2, .L89+8
 1132 013a 9369     		ldr	r3, [r2, #24]
 211:Src/main.c    ****     // Handle the error
 1133              		.loc 1 211 17 view .LVU363
 1134 013c 4021     		movs	r1, #64
 1135 013e 0B43     		orrs	r3, r1
 1136 0140 9361     		str	r3, [r2, #24]
 1137              	.L66:
 209:Src/main.c    ****   {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 34


 1138              		.loc 1 209 10 is_stmt 1 view .LVU364
 209:Src/main.c    ****   {
 1139              		.loc 1 209 16 is_stmt 0 view .LVU365
 1140 0142 584B     		ldr	r3, .L89+20
 1141 0144 9B69     		ldr	r3, [r3, #24]
 209:Src/main.c    ****   {
 1142              		.loc 1 209 22 view .LVU366
 1143 0146 1222     		movs	r2, #18
 209:Src/main.c    ****   {
 1144              		.loc 1 209 10 view .LVU367
 1145 0148 1A42     		tst	r2, r3
 1146 014a F5D0     		beq	.L67
 215:Src/main.c    ****   {
 1147              		.loc 1 215 3 is_stmt 1 view .LVU368
 215:Src/main.c    ****   {
 1148              		.loc 1 215 11 is_stmt 0 view .LVU369
 1149 014c 554B     		ldr	r3, .L89+20
 1150 014e 9B69     		ldr	r3, [r3, #24]
 215:Src/main.c    ****   {
 1151              		.loc 1 215 6 view .LVU370
 1152 0150 DB06     		lsls	r3, r3, #27
 1153 0152 04D5     		bpl	.L68
 217:Src/main.c    ****     // Handle NACK error
 1154              		.loc 1 217 5 is_stmt 1 view .LVU371
 217:Src/main.c    ****     // Handle NACK error
 1155              		.loc 1 217 10 is_stmt 0 view .LVU372
 1156 0154 504A     		ldr	r2, .L89+8
 1157 0156 9169     		ldr	r1, [r2, #24]
 217:Src/main.c    ****     // Handle NACK error
 1158              		.loc 1 217 17 view .LVU373
 1159 0158 4023     		movs	r3, #64
 1160 015a 0B43     		orrs	r3, r1
 1161 015c 9361     		str	r3, [r2, #24]
 1162              	.L68:
 221:Src/main.c    **** 
 1163              		.loc 1 221 3 is_stmt 1 view .LVU374
 221:Src/main.c    **** 
 1164              		.loc 1 221 14 is_stmt 0 view .LVU375
 1165 015e 514B     		ldr	r3, .L89+20
 1166 0160 2022     		movs	r2, #32
 1167 0162 9A62     		str	r2, [r3, #40]
 223:Src/main.c    ****   {
 1168              		.loc 1 223 3 is_stmt 1 view .LVU376
 223:Src/main.c    ****   {
 1169              		.loc 1 223 9 is_stmt 0 view .LVU377
 1170 0164 04E0     		b	.L69
 1171              	.L70:
 225:Src/main.c    ****     // Handle the error
 1172              		.loc 1 225 5 is_stmt 1 view .LVU378
 225:Src/main.c    ****     // Handle the error
 1173              		.loc 1 225 10 is_stmt 0 view .LVU379
 1174 0166 4C4A     		ldr	r2, .L89+8
 1175 0168 9369     		ldr	r3, [r2, #24]
 225:Src/main.c    ****     // Handle the error
 1176              		.loc 1 225 17 view .LVU380
 1177 016a 4021     		movs	r1, #64
 1178 016c 0B43     		orrs	r3, r1
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 35


 1179 016e 9361     		str	r3, [r2, #24]
 1180              	.L69:
 223:Src/main.c    ****   {
 1181              		.loc 1 223 10 is_stmt 1 view .LVU381
 223:Src/main.c    ****   {
 1182              		.loc 1 223 16 is_stmt 0 view .LVU382
 1183 0170 4C4B     		ldr	r3, .L89+20
 1184 0172 9B69     		ldr	r3, [r3, #24]
 223:Src/main.c    ****   {
 1185              		.loc 1 223 22 view .LVU383
 1186 0174 1222     		movs	r2, #18
 223:Src/main.c    ****   {
 1187              		.loc 1 223 10 view .LVU384
 1188 0176 1A42     		tst	r2, r3
 1189 0178 F5D0     		beq	.L70
 230:Src/main.c    ****   {
 1190              		.loc 1 230 3 is_stmt 1 view .LVU385
 230:Src/main.c    ****   {
 1191              		.loc 1 230 11 is_stmt 0 view .LVU386
 1192 017a 4A4B     		ldr	r3, .L89+20
 1193 017c 9B69     		ldr	r3, [r3, #24]
 230:Src/main.c    ****   {
 1194              		.loc 1 230 6 view .LVU387
 1195 017e DB06     		lsls	r3, r3, #27
 1196 0180 04D5     		bpl	.L71
 232:Src/main.c    ****     // Handle NACK error
 1197              		.loc 1 232 5 is_stmt 1 view .LVU388
 232:Src/main.c    ****     // Handle NACK error
 1198              		.loc 1 232 10 is_stmt 0 view .LVU389
 1199 0182 454A     		ldr	r2, .L89+8
 1200 0184 9169     		ldr	r1, [r2, #24]
 232:Src/main.c    ****     // Handle NACK error
 1201              		.loc 1 232 17 view .LVU390
 1202 0186 4023     		movs	r3, #64
 1203 0188 0B43     		orrs	r3, r1
 1204 018a 9361     		str	r3, [r2, #24]
 1205              	.L71:
 237:Src/main.c    **** 
 1206              		.loc 1 237 3 is_stmt 1 view .LVU391
 237:Src/main.c    **** 
 1207              		.loc 1 237 14 is_stmt 0 view .LVU392
 1208 018c 454B     		ldr	r3, .L89+20
 1209 018e 0B22     		movs	r2, #11
 1210 0190 9A62     		str	r2, [r3, #40]
 239:Src/main.c    ****   {
 1211              		.loc 1 239 3 is_stmt 1 view .LVU393
 239:Src/main.c    ****   {
 1212              		.loc 1 239 9 is_stmt 0 view .LVU394
 1213 0192 04E0     		b	.L72
 1214              	.L73:
 241:Src/main.c    ****     // Handle the error
 1215              		.loc 1 241 5 is_stmt 1 view .LVU395
 241:Src/main.c    ****     // Handle the error
 1216              		.loc 1 241 10 is_stmt 0 view .LVU396
 1217 0194 404A     		ldr	r2, .L89+8
 1218 0196 9369     		ldr	r3, [r2, #24]
 241:Src/main.c    ****     // Handle the error
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 36


 1219              		.loc 1 241 17 view .LVU397
 1220 0198 4021     		movs	r1, #64
 1221 019a 0B43     		orrs	r3, r1
 1222 019c 9361     		str	r3, [r2, #24]
 1223              	.L72:
 239:Src/main.c    ****   {
 1224              		.loc 1 239 10 is_stmt 1 view .LVU398
 239:Src/main.c    ****   {
 1225              		.loc 1 239 16 is_stmt 0 view .LVU399
 1226 019e 414B     		ldr	r3, .L89+20
 1227 01a0 9B69     		ldr	r3, [r3, #24]
 239:Src/main.c    ****   {
 1228              		.loc 1 239 22 view .LVU400
 1229 01a2 5022     		movs	r2, #80
 239:Src/main.c    ****   {
 1230              		.loc 1 239 10 view .LVU401
 1231 01a4 1A42     		tst	r2, r3
 1232 01a6 F5D0     		beq	.L73
 245:Src/main.c    ****   {
 1233              		.loc 1 245 3 is_stmt 1 view .LVU402
 245:Src/main.c    ****   {
 1234              		.loc 1 245 11 is_stmt 0 view .LVU403
 1235 01a8 3E4B     		ldr	r3, .L89+20
 1236 01aa 9B69     		ldr	r3, [r3, #24]
 245:Src/main.c    ****   {
 1237              		.loc 1 245 6 view .LVU404
 1238 01ac DB06     		lsls	r3, r3, #27
 1239 01ae 04D5     		bpl	.L74
 247:Src/main.c    ****     // Handle NACK error
 1240              		.loc 1 247 5 is_stmt 1 view .LVU405
 247:Src/main.c    ****     // Handle NACK error
 1241              		.loc 1 247 10 is_stmt 0 view .LVU406
 1242 01b0 394A     		ldr	r2, .L89+8
 1243 01b2 9169     		ldr	r1, [r2, #24]
 247:Src/main.c    ****     // Handle NACK error
 1244              		.loc 1 247 17 view .LVU407
 1245 01b4 4023     		movs	r3, #64
 1246 01b6 0B43     		orrs	r3, r1
 1247 01b8 9361     		str	r3, [r2, #24]
 1248              	.L74:
 252:Src/main.c    **** 	if (read() != 0x0b) {
 1249              		.loc 1 252 2 is_stmt 1 view .LVU408
 1250 01ba 2020     		movs	r0, #32
 1251 01bc FFF7FEFF 		bl	write
 1252              	.LVL29:
 253:Src/main.c    **** 		GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED;
 1253              		.loc 1 253 2 view .LVU409
 253:Src/main.c    **** 		GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED;
 1254              		.loc 1 253 6 is_stmt 0 view .LVU410
 1255 01c0 FFF7FEFF 		bl	read
 1256              	.LVL30:
 253:Src/main.c    **** 		GPIOC->BSRR |= (1 << 6); // Set PC6 high to turn on the red LED;
 1257              		.loc 1 253 5 discriminator 1 view .LVU411
 1258 01c4 0B28     		cmp	r0, #11
 1259 01c6 04D0     		beq	.L75
 254:Src/main.c    **** 	}
 1260              		.loc 1 254 3 is_stmt 1 view .LVU412
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 37


 254:Src/main.c    **** 	}
 1261              		.loc 1 254 8 is_stmt 0 view .LVU413
 1262 01c8 334A     		ldr	r2, .L89+8
 1263 01ca 9169     		ldr	r1, [r2, #24]
 254:Src/main.c    **** 	}
 1264              		.loc 1 254 15 view .LVU414
 1265 01cc 4023     		movs	r3, #64
 1266 01ce 0B43     		orrs	r3, r1
 1267 01d0 9361     		str	r3, [r2, #24]
 1268              	.L75:
 260:Src/main.c    ****   GPIOC->BSRR |= (1 << (7 + 16)); // Clear PC7 to turn off the blue LED
 1269              		.loc 1 260 3 is_stmt 1 view .LVU415
 260:Src/main.c    ****   GPIOC->BSRR |= (1 << (7 + 16)); // Clear PC7 to turn off the blue LED
 1270              		.loc 1 260 8 is_stmt 0 view .LVU416
 1271 01d2 314B     		ldr	r3, .L89+8
 1272 01d4 9969     		ldr	r1, [r3, #24]
 260:Src/main.c    ****   GPIOC->BSRR |= (1 << (7 + 16)); // Clear PC7 to turn off the blue LED
 1273              		.loc 1 260 15 view .LVU417
 1274 01d6 8022     		movs	r2, #128
 1275 01d8 D203     		lsls	r2, r2, #15
 1276 01da 0A43     		orrs	r2, r1
 1277 01dc 9A61     		str	r2, [r3, #24]
 261:Src/main.c    ****   GPIOC->BSRR |= (1 << (8 + 16)); // Clear PC8 to turn off the orange LED
 1278              		.loc 1 261 3 is_stmt 1 view .LVU418
 261:Src/main.c    ****   GPIOC->BSRR |= (1 << (8 + 16)); // Clear PC8 to turn off the orange LED
 1279              		.loc 1 261 8 is_stmt 0 view .LVU419
 1280 01de 9969     		ldr	r1, [r3, #24]
 261:Src/main.c    ****   GPIOC->BSRR |= (1 << (8 + 16)); // Clear PC8 to turn off the orange LED
 1281              		.loc 1 261 15 view .LVU420
 1282 01e0 8022     		movs	r2, #128
 1283 01e2 1204     		lsls	r2, r2, #16
 1284 01e4 0A43     		orrs	r2, r1
 1285 01e6 9A61     		str	r2, [r3, #24]
 262:Src/main.c    ****   GPIOC->BSRR |= (1 << (9 + 16)); // Clear PC9 to turn off the green LED
 1286              		.loc 1 262 3 is_stmt 1 view .LVU421
 262:Src/main.c    ****   GPIOC->BSRR |= (1 << (9 + 16)); // Clear PC9 to turn off the green LED
 1287              		.loc 1 262 8 is_stmt 0 view .LVU422
 1288 01e8 9969     		ldr	r1, [r3, #24]
 262:Src/main.c    ****   GPIOC->BSRR |= (1 << (9 + 16)); // Clear PC9 to turn off the green LED
 1289              		.loc 1 262 15 view .LVU423
 1290 01ea 8022     		movs	r2, #128
 1291 01ec 5204     		lsls	r2, r2, #17
 1292 01ee 0A43     		orrs	r2, r1
 1293 01f0 9A61     		str	r2, [r3, #24]
 263:Src/main.c    **** 
 1294              		.loc 1 263 3 is_stmt 1 view .LVU424
 263:Src/main.c    **** 
 1295              		.loc 1 263 8 is_stmt 0 view .LVU425
 1296 01f2 9969     		ldr	r1, [r3, #24]
 263:Src/main.c    **** 
 1297              		.loc 1 263 15 view .LVU426
 1298 01f4 8022     		movs	r2, #128
 1299 01f6 9204     		lsls	r2, r2, #18
 1300 01f8 0A43     		orrs	r2, r1
 1301 01fa 9A61     		str	r2, [r3, #24]
 265:Src/main.c    **** 	int16_t yAxis = 0;
 1302              		.loc 1 265 3 is_stmt 1 view .LVU427
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 38


 1303              	.LVL31:
 266:Src/main.c    **** 	const int16_t threshold = 0x01FF;
 1304              		.loc 1 266 2 view .LVU428
 267:Src/main.c    **** 
 1305              		.loc 1 267 2 view .LVU429
 267:Src/main.c    **** 
 1306              		.loc 1 267 2 is_stmt 0 view .LVU430
 1307 01fc 1DE0     		b	.L84
 1308              	.LVL32:
 1309              	.L76:
 277:Src/main.c    **** 		}
 1310              		.loc 1 277 4 is_stmt 1 view .LVU431
 277:Src/main.c    **** 		}
 1311              		.loc 1 277 9 is_stmt 0 view .LVU432
 1312 01fe 2649     		ldr	r1, .L89+8
 1313 0200 8869     		ldr	r0, [r1, #24]
 1314              	.LVL33:
 277:Src/main.c    **** 		}
 1315              		.loc 1 277 16 view .LVU433
 1316 0202 8022     		movs	r2, #128
 1317 0204 D203     		lsls	r2, r2, #15
 1318 0206 0243     		orrs	r2, r0
 1319 0208 8A61     		str	r2, [r1, #24]
 1320 020a 25E0     		b	.L77
 1321              	.L78:
 284:Src/main.c    **** 		}
 1322              		.loc 1 284 4 is_stmt 1 view .LVU434
 284:Src/main.c    **** 		}
 1323              		.loc 1 284 9 is_stmt 0 view .LVU435
 1324 020c 2249     		ldr	r1, .L89+8
 1325 020e 8869     		ldr	r0, [r1, #24]
 284:Src/main.c    **** 		}
 1326              		.loc 1 284 16 view .LVU436
 1327 0210 8022     		movs	r2, #128
 1328 0212 1204     		lsls	r2, r2, #16
 1329 0214 0243     		orrs	r2, r0
 1330 0216 8A61     		str	r2, [r1, #24]
 1331 0218 26E0     		b	.L79
 1332              	.L80:
 291:Src/main.c    **** 		}
 1333              		.loc 1 291 4 is_stmt 1 view .LVU437
 291:Src/main.c    **** 		}
 1334              		.loc 1 291 9 is_stmt 0 view .LVU438
 1335 021a 1F49     		ldr	r1, .L89+8
 1336 021c 8869     		ldr	r0, [r1, #24]
 291:Src/main.c    **** 		}
 1337              		.loc 1 291 16 view .LVU439
 1338 021e 8022     		movs	r2, #128
 1339 0220 5204     		lsls	r2, r2, #17
 1340 0222 0243     		orrs	r2, r0
 1341 0224 8A61     		str	r2, [r1, #24]
 1342 0226 28E0     		b	.L81
 1343              	.L88:
 295:Src/main.c    **** 		}
 1344              		.loc 1 295 4 is_stmt 1 view .LVU440
 295:Src/main.c    **** 		}
 1345              		.loc 1 295 9 is_stmt 0 view .LVU441
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 39


 1346 0228 1B4A     		ldr	r2, .L89+8
 1347 022a 9169     		ldr	r1, [r2, #24]
 295:Src/main.c    **** 		}
 1348              		.loc 1 295 16 view .LVU442
 1349 022c 8023     		movs	r3, #128
 1350              	.LVL34:
 295:Src/main.c    **** 		}
 1351              		.loc 1 295 16 view .LVU443
 1352 022e 9B00     		lsls	r3, r3, #2
 1353 0230 0B43     		orrs	r3, r1
 1354 0232 9361     		str	r3, [r2, #24]
 1355              	.L83:
 301:Src/main.c    **** 	}
 1356              		.loc 1 301 3 is_stmt 1 view .LVU444
 1357 0234 6420     		movs	r0, #100
 1358 0236 FFF7FEFF 		bl	HAL_Delay
 1359              	.LVL35:
 269:Src/main.c    **** 		xAxis = readXAxis();
 1360              		.loc 1 269 9 view .LVU445
 1361              	.L84:
 269:Src/main.c    **** 		xAxis = readXAxis();
 1362              		.loc 1 269 3 view .LVU446
 270:Src/main.c    **** 		yAxis = readYAxis();
 1363              		.loc 1 270 3 view .LVU447
 270:Src/main.c    **** 		yAxis = readYAxis();
 1364              		.loc 1 270 11 is_stmt 0 view .LVU448
 1365 023a FFF7FEFF 		bl	readXAxis
 1366              	.LVL36:
 1367 023e 0400     		movs	r4, r0
 1368              	.LVL37:
 271:Src/main.c    **** 		
 1369              		.loc 1 271 3 is_stmt 1 view .LVU449
 271:Src/main.c    **** 		
 1370              		.loc 1 271 11 is_stmt 0 view .LVU450
 1371 0240 FFF7FEFF 		bl	readYAxis
 1372              	.LVL38:
 271:Src/main.c    **** 		
 1373              		.loc 1 271 11 view .LVU451
 1374 0244 0300     		movs	r3, r0
 1375              	.LVL39:
 273:Src/main.c    **** 			GPIOC->BSRR |= (1 << 6); // Set PC6 to turn on the red LED
 1376              		.loc 1 273 3 is_stmt 1 view .LVU452
 273:Src/main.c    **** 			GPIOC->BSRR |= (1 << 6); // Set PC6 to turn on the red LED
 1377              		.loc 1 273 6 is_stmt 0 view .LVU453
 1378 0246 8022     		movs	r2, #128
 1379 0248 9200     		lsls	r2, r2, #2
 1380 024a 9442     		cmp	r4, r2
 1381 024c D7DB     		blt	.L76
 274:Src/main.c    **** 		}
 1382              		.loc 1 274 4 is_stmt 1 view .LVU454
 274:Src/main.c    **** 		}
 1383              		.loc 1 274 9 is_stmt 0 view .LVU455
 1384 024e 1249     		ldr	r1, .L89+8
 1385 0250 8A69     		ldr	r2, [r1, #24]
 274:Src/main.c    **** 		}
 1386              		.loc 1 274 16 view .LVU456
 1387 0252 4020     		movs	r0, #64
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 40


 1388              	.LVL40:
 274:Src/main.c    **** 		}
 1389              		.loc 1 274 16 view .LVU457
 1390 0254 0243     		orrs	r2, r0
 1391 0256 8A61     		str	r2, [r1, #24]
 1392              	.L77:
 280:Src/main.c    **** 			GPIOC->BSRR |= (1 << 7); // Set PC7 to turn on the blue LED
 1393              		.loc 1 280 3 is_stmt 1 view .LVU458
 280:Src/main.c    **** 			GPIOC->BSRR |= (1 << 7); // Set PC7 to turn on the blue LED
 1394              		.loc 1 280 6 is_stmt 0 view .LVU459
 1395 0258 164A     		ldr	r2, .L89+36
 1396 025a 9342     		cmp	r3, r2
 1397 025c D6DA     		bge	.L78
 281:Src/main.c    **** 		}
 1398              		.loc 1 281 4 is_stmt 1 view .LVU460
 281:Src/main.c    **** 		}
 1399              		.loc 1 281 9 is_stmt 0 view .LVU461
 1400 025e 0E49     		ldr	r1, .L89+8
 1401 0260 8A69     		ldr	r2, [r1, #24]
 281:Src/main.c    **** 		}
 1402              		.loc 1 281 16 view .LVU462
 1403 0262 8020     		movs	r0, #128
 1404 0264 0243     		orrs	r2, r0
 1405 0266 8A61     		str	r2, [r1, #24]
 1406              	.L79:
 287:Src/main.c    **** 			GPIOC->BSRR |= (1 << 8); // Set PC8 to turn on the orange LED
 1407              		.loc 1 287 3 is_stmt 1 view .LVU463
 287:Src/main.c    **** 			GPIOC->BSRR |= (1 << 8); // Set PC8 to turn on the orange LED
 1408              		.loc 1 287 6 is_stmt 0 view .LVU464
 1409 0268 124A     		ldr	r2, .L89+36
 1410 026a 9442     		cmp	r4, r2
 1411 026c D5DA     		bge	.L80
 288:Src/main.c    **** 		}
 1412              		.loc 1 288 4 is_stmt 1 view .LVU465
 288:Src/main.c    **** 		}
 1413              		.loc 1 288 9 is_stmt 0 view .LVU466
 1414 026e 0A49     		ldr	r1, .L89+8
 1415 0270 8869     		ldr	r0, [r1, #24]
 288:Src/main.c    **** 		}
 1416              		.loc 1 288 16 view .LVU467
 1417 0272 8022     		movs	r2, #128
 1418 0274 5200     		lsls	r2, r2, #1
 1419 0276 0243     		orrs	r2, r0
 1420 0278 8A61     		str	r2, [r1, #24]
 1421              	.L81:
 294:Src/main.c    **** 			GPIOC->BSRR |= (1 << 9); // Set PC9 to turn on the green LED
 1422              		.loc 1 294 3 is_stmt 1 view .LVU468
 294:Src/main.c    **** 			GPIOC->BSRR |= (1 << 9); // Set PC9 to turn on the green LED
 1423              		.loc 1 294 6 is_stmt 0 view .LVU469
 1424 027a 8022     		movs	r2, #128
 1425 027c 9200     		lsls	r2, r2, #2
 1426 027e 9342     		cmp	r3, r2
 1427 0280 D2DA     		bge	.L88
 298:Src/main.c    **** 		}
 1428              		.loc 1 298 4 is_stmt 1 view .LVU470
 298:Src/main.c    **** 		}
 1429              		.loc 1 298 9 is_stmt 0 view .LVU471
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 41


 1430 0282 054A     		ldr	r2, .L89+8
 1431 0284 9169     		ldr	r1, [r2, #24]
 298:Src/main.c    **** 		}
 1432              		.loc 1 298 16 view .LVU472
 1433 0286 8023     		movs	r3, #128
 1434              	.LVL41:
 298:Src/main.c    **** 		}
 1435              		.loc 1 298 16 view .LVU473
 1436 0288 9B04     		lsls	r3, r3, #18
 1437 028a 0B43     		orrs	r3, r1
 1438 028c 9361     		str	r3, [r2, #24]
 1439 028e D1E7     		b	.L83
 1440              	.L90:
 1441              		.align	2
 1442              	.L89:
 1443 0290 00100240 		.word	1073876992
 1444 0294 01600000 		.word	24577
 1445 0298 00080048 		.word	1207961600
 1446 029c 00040048 		.word	1207960576
 1447 02a0 FFBFFFFF 		.word	-16385
 1448 02a4 00580040 		.word	1073764352
 1449 02a8 00FC80FF 		.word	-8324096
 1450 02ac FFFBFFFF 		.word	-1025
 1451 02b0 D2000200 		.word	131282
 1452 02b4 01FEFFFF 		.word	-511
 1453              		.cfi_endproc
 1454              	.LFE40:
 1456              		.text
 1457              	.Letext0:
 1458              		.file 2 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1459              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1460              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1461              		.file 5 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1462              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1463              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1464              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1465              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1466              		.file 10 "<built-in>"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:19     .text.write:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:25     .text.write:00000000 write
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:150    .text.write:0000007c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:159    .text.read:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:165    .text.read:00000000 read
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:282    .text.read:00000070 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:290    .text.stop:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:296    .text.stop:00000000 stop
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:318    .text.stop:00000010 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:323    .text.readXAxis:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:329    .text.readXAxis:00000000 readXAxis
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:504    .text.readXAxis:000000ac $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:512    .text.readYAxis:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:518    .text.readYAxis:00000000 readYAxis
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:693    .text.readYAxis:000000ac $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:701    .text._Error_Handler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:707    .text._Error_Handler:00000000 _Error_Handler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:725    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:730    .text.SystemClock_Config:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:736    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:840    .text.SystemClock_Config:00000070 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:846    .text.main:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:852    .text.main:00000000 main
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccnCZB4g.s:1443   .text.main:00000290 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
memset
HAL_GPIO_Init
HAL_Delay
